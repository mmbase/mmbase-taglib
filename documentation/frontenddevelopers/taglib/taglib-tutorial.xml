<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article>
  <title>Creating webpages with the MMBase Tag Library</title>

  <articleinfo>
    <date>august 2002</date>

    <copyright>
      <year>2002</year>

      <holder>MMBase Foundation</holder>
    </copyright>

    <authorgroup>
      <author>
        <firstname>Rogier</firstname>

        <surname>Schaaf</surname>
      </author>
    </authorgroup>

    <revhistory>
      <revision>
        <revnumber>0.1</revnumber>

        <date>august 2002</date>

        <revremark>First draft</revremark>
      </revision>
    </revhistory>

    <abstract>
      <para>This document offers a tutorial for page designer who want to
      build web pages using the MMBase Tag Library.</para>
    </abstract>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <para>In this tutorial we try to give page designers a hands-on overview
    of the capabilities of the MMBase Tag Libraries. This technology, shipped
    with the MMBase content management system, enables page designers in
    developing web pages that retrieve their content from the MMBase system.
    After reading this tutorial and working your way through the examples we
    hope that share our enthusiasm for the MMBase system and the possibilites
    it offers to page designers.</para>

    <section>
      <title>Who should read this tutorial?</title>

      <para>This tutorial is aimed at page designers who develop websites
      using MMBase as the underlying content management system. To succesful
      complete this tutorial, you must be proficient with HTML and JSP
      concepts like tags and tag libraries.</para>
    </section>

    <section>
      <title>What you need to complete this tutorial?</title>

      <para>This tutorial requires a working instance of MMBase with an empty
      cloud available. The name of the cloud is [TODO: name of the cloud]. If
      you don&#39;t have an MMBase instance available in your network, ask
      your MMBase administrator to set one up for you.</para>

      <para>Next you&#39;ll need sample content in the MMBase cloud to work
      your way through the tutorial. The sample content is provided in a zip
      file, together with this tutorial document. In the next chapter the
      process of adding the sample content to the MMBase cloud is explained.</para>

      <para>To edit your pages you&#39;ll need at least some breed of editor.
      The tutorial makes no assumptions on your tooling. You can edit your
      pages with your favorite editor, however the tutorial doesn&#39;t
      elaborate on using specific tools for page editing.</para>
    </section>

    <section>
      <title>Conventions</title>

      <para>We have used a number of styles of text and layout in this
      tutorial to help differentiate between different kinds of information.
      The following examples are an example of this markup.</para>

      <example>
        <title>Example</title>

        <para>All examples in this tutorial are separately headed</para>
      </example>

      <caution>
        <para>this indicates a possible problem area</para>
      </caution>

      <warning>
        <para>this indicates a warning</para>
      </warning>

      <important>
        <para>important notices</para>
      </important>

      <note>
        <para>additional information</para>
      </note>

      <tip>
        <para>this indicates a valuable tip</para>
      </tip>
    </section>

    <section>
      <title>Tell us what you think</title>

      <para>The MMBase community has worked hard on this tutorial to make it
      enjoyable and useful. Our best reward would be to hear from you that you
      liked working through it and it helped you discovering the possibilities
      of the MMBase tag library.</para>

      <para>Please let us know what you think about it. Tell us what you liked
      best and what aspects of this tutorial you didn&#39;t like so we improve
      future releases of this document. The easiest way to give us feedback is
      to drop an email message at:</para>

      <remark><email>info@mmbase.org</email></remark>

      <para>You can also find more information about MMBase on the MMBase
      website. There you&#39;ll find sample code, information on latest
      releases, currently running projects and their participating members and
      lots of other interesting information. The address of the website is:</para>

      <remark><link>http://www.mmbase.org</link></remark>
    </section>

    <section>
      <title>Getting help</title>

      <para>If you find a mistake in this tutorial, please inform us about it
      [TODO: where, who?].</para>

      <para>If you have additional questions please contact one of the
      companies that support MMBase. You will find a complete listing of
      supporting companies on the MMBase website. Point your browser to:</para>

      <remark><link>http://www.mmbase.org</link></remark>

      <para>Furthermore, you can subscribe to several mailing lists where
      users and developers exchange information. Good chance you&#39;ll find
      someone there willing to help you out.</para>
    </section>
  </section>

  <section>
    <title>Preparing the tutorial</title>

    <para>This tutorial builds the MyNews application, a sample application
    that is shipped with the MMBase distribution. Before beginning this
    tutorial, make sure that you have the distribution of MMBase installed and
    running with the demo applications running as well. The MyNews application
    uses the following cloud design. Take a minute to review this design as it
    will be used throughout this tutorial.</para>

    <figure>
      <title></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="media/cloud.jpg" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>As you can see, the central item appears to be our news item. It has
    several relations to other content types within the cloud, some of them
    showing a &#34;posrel&#34; attribute. These are special types of
    relations. Normally when MMBase maintains a relation between two content
    types, MMBase &#34;forgets&#34; the specific sequence in which the
    relations where created. Sometimes it&#39;s necessary to maintain this
    specific sequence. A posrel relation does just that. for further
    information on MMBase relations and the usage of posrel, check [todo:
    other source of info?].</para>
  </section>

  <section>
    <title>Accessing content stored in MMBase</title>

    <para>When you&#39;re developing websites with MMBase as the underlying
    content management system, your pages will need access to the content that
    is stored in MMBase. Content in MMBase is stored in a cloud. Within the
    cloud you&#39;ll find nodes. The nodes are the actual pieces of content in
    MMBase. Nodes are organized in content types and relations between content
    types. For example, if you define that every news item you publish on your
    website would contain the news text and an image, then you would have two
    content types in your cloud: content type &#34;news&#34; and content type
    &#34;image&#34;. Furthermore you would define a relation between the
    content types news and image to support displaying images with newsitems.</para>

    <para>For a very basic website you&#39;ll need no more than a handful of
    node types. The standard MMBase distribution is supplied with all
    necessary node types for a basic website.</para>

    <para>Now let&#39;s have a look at how we can access the cloud from within
    the default J2EE templating facility, e.g. Java Server Pages or short
    JSP&#39;s. To access the content cloud, MMBase supplies developers with a
    tag library. We assume you are familiar with the concepts of such a
    library and will not elaborate on it here.</para>

    <para>Every tag library uses it&#39;s own namespace. The namespace is
    there to help the system distinguish between different tags from different
    libraries. MMBase tags are all prefixed by default with the string
    &#34;mm&#34;. You are free to choose another prefix, however this usage is
    very common across MMBase developers.</para>

    <para>To prepare your pages to work with MMBase tag libraries the first
    thing you&#39;ll have todo is to declare the MMBase tag library in your
    page. The MMBase tag library is declared by the following statement:</para>

    <programlisting>&#60;%@ taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;</programlisting>

    <para>In this declaration you tell the JSP compiler that you will be using
    the MMBase taglibrary and that the tags used by this library are prefixed
    by &#34;mm&#34;. The value for the uri attribute, in this case
    &#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; is the identification of
    the MMBase tag library and should correspond to the entry in the web.xml
    file of your web container configuration. The entry in your WEB.XML should
    reflect the following entry</para>

    <programlisting>&#60;!-- MMBase tag library --&#62;
&#60;taglib&#62;
  &#60;taglib-uri&#62;http://www.mmbase.org/mmbase-taglib-1.0&#60;/taglib-uri&#62;
  &#60;taglib-location&#62;/WEB-INF/mmbase-taglib.tld&#60;/taglib-location&#62;
&#60;/taglib&#62;
</programlisting>

    <para>In the default MMBase distro, this is all preconfigured for you.
    Have a look at the file web.xml in the WEB-INF directory. Look for the
    entry mmbase-taglib. This entry tells your application server that
    you&#39;ll be using this library in your JSP&#39;s. Furthermore, the
    classes that are used by the mmbase taglib are packaged together with the
    MMBase core code, but if you inspect the file mmbase.jar with a ZIP tool,
    you&#39;ll notice the taglib classes.</para>

    <section>
      <title>Importing the default magazine</title>

      <para>To start with this tutorial, we will first start the actual MyNews
      application. Find the URL on the examples screen and click it to startup
      MyNews. MyNews should present you it&#39;s first screen.</para>

      <para>[todo:screendump]</para>

      <para>This first screen shows the magazine that&#39;s available in the
      demo setup of MMBase, together with the news items associated with that
      magazine and (full right) a link you can click to read the actual news
      item. As you can see, the layout is straightforward without graphics.
      We&#39;ll focus on developing this page first, then you can add graphics
      and layout to your liking.</para>

      <para>Below, in the lefthand corner of the screen, you&#39;ll find two
      links. Clicking the last link will show you the source of the this page.</para>

      <para>The MyNews application runs with a simple database with a single
      magazine in it. The designers of the database have labelled this
      magazine with a default alias named &#34;default.mags&#34;. To use this
      default magazine we import it into our page by using the
      &#60;mm:import&#62; tag. By importing the magazine into our page, the
      node becomes available in our page. Add the following to your JSP:</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;</programlisting>
    </section>

    <section>
      <title>Accessing the cloud</title>

      <para>Any webpage that tries to access content from MMBase will first
      have to initialize access to the cloud. For cloud initialization the
      &#60;mm:cloud&#62; tag is available. Besides a number of exceptions, the
      &#60;mm:cloud&#62; tag encapsulates all other MMBase tags you want to
      use. This means that all other MMBase tags you&#39;ll want to use, must
      appear between the &#60;mm: cloud&#62; and &#60;/mm:cloud&#62; tags.
      Note that you get compiler errors when you place tags outside the cloud
      tag.</para>

      <example>
        <para>When using the &#60;mm:cloud&#62; tag there are several
        attributes that you can use. For now, we only use the &#34;name&#34;
        attribute. By default MMBase uses the &#34;mmbase&#34; value for this
        attribute if you omit it. If you want to access a cloud that has
        another name, you&#39;ll have to supply this name to be able to access
        that cloud.</para>

        <para>Please refer to the MMBase Tag Library Reference Guide to get a
        full overview of the possible attributes you can use with this tag.</para>

        <para><tip><para>The &#60;mm:cloud&#62; tag offers far more
        functionality that presented here. To learn more about the
        &#60;mm:cloud&#62; tag, please refer to the advanced features section
        of the tutorial where you can learn about using the authentication
        features of this tag.</para></tip></para>

        <para>To access the cloud, add the following tags to our page:</para>

        <programlisting>&#60;%@taglib
        uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34;
        prefix=&#34;mm&#34; %&#62; &#60;mm:import
        externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
        &#60;mm:cloud name=&#34;mmbase&#34;&#62; &#60;/mm:cloud&#62;</programlisting>
      </example>
    </section>

    <section>
      <title>Working with node tags</title>

      <para>Through the tag in the previous chapter, the &#60;mm:cloud&#62;
      tag, we gained access to the MMBase cloud. Next we want access to our
      magazine, a node in the MMBase cloud.</para>

      <para>Now to access our magazine, you&#39;ll have to tell MMBase which
      node you wish to access. Every node within MMBase is automatically
      assigned a unique id to distinguish it from other nodes.</para>

      <tip>
        <para>To make your content portable between databases, you can use
        aliases to refer to your nodes, in stead of absolute numerical node
        id&#39;s. As you transfer content between databases it&#39;s not
        always garanteed that nodes receive the same id, while they always
        keep an assigned alias.</para>
      </tip>

      <para>To retrieve a node from MMBase you use the &#60;mm:node&#62; tag.</para>

      <para>To retrieve our magazine we obvisously have two alternate
      approaches. One we can use its node id or we can use the alias that is
      linked to our magazine. As we have no clue to the actual id that MMBase
      used to identify our magazine, we&#39;ll have to use its alias. From the
      previous paragraph we know that our magazine has a default alias of
      &#34;default.mags&#34;. We&#39;ll use that to access it in our JSP. Add
      the follwing to our JSP:</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>This entry accesses the node that was imported earlier into our
      page. By importing a node into a page, you create a so called
      &#34;context&#34; from which you can later retrieve nodes. In our
      example, we imported the node into our context with id &#34;magid&#34;.
      By using the $ directive, MMBase knows that the node is actually located
      in our context and does not have to be loaded from the cloud. By adding
      an explicit id, we make sure we can reference all fields inside our
      magazine without any conflicts with other nodes.</para>
    </section>

    <section>
      <title>Summary</title>

      <para>We have now prepared our first JSP that will retrieve a default
      magazine from our preloaded content cloud. We used the
      &#60;mm:import&#62; tag to import our magazine into a context and later
      used the &#60;mm:node&#62; tag to retrieve the magazine from this
      context. Before we could use the &#60;mm:node&#62; tag however, we had
      to tell MMBase which cloud we are going to access. Accessing the cloud
      is the important step you always have to perform to work with MMBase
      content in a JSP environment.</para>

      <para>In the next chapter we&#39;ll try to display some of the fields of
      the magazine and display the titles of the available newsitems
      associated with the magazine.</para>
    </section>
  </section>

  <section>
    <title>Working with field tags</title>

    <para>MMBase organizes its content into nodes. Each node consists of
    several fields, containing the actual content of the node. Each field can
    be of a specific type. To access the fields within a node, MMBase offers
    the &#60;mm:field&#62; tag. To access the title and the subtitle of the
    magazine, we tell MMBase to display it by using this tag.</para>

    <para>In our first page we&#39;ll now use the &#60;mm:field&#62; tag to
    display fields from the default magazine. Create a table and within the
    table, create two rows. The first row displays the title and the subtitle
    of the default magazine. The second row display the intro and the body of
    the magzine. Your page should now look something like the listing below.</para>

    <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

    <para>Note that we created a table, and inside the table we used the
    &#60;mm:field&#62; tag to display the title and the subtitle of the
    magazine. As a simple formatting option we added &#60;h1&#62; and
    &#60;h2&#62; tags to create the impression of titles. Also notice that all
    MMBase tags are well formed. This means that opening and closing tags
    should always be in balance. JSP compilers are not as forgiving as
    browsers. If your tags are not well formed, you will definitely see
    compile errors in your log. If you see them, correct the errors and try
    compiling the page again.</para>

    <para>Your page is now ready for a first test and should display the
    title,subtitle, intro and body of the default magazine from the MMBase
    content cloud.</para>

    <para>The &#60;mm:node&#62; tag offers more options than the one shown in
    this tutorial. Please refer to the full documentation for more information
    on the use of this tag.</para>
  </section>

  <section>
    <title>Working with related nodes</title>

    <para>Next we wish to display the news items that can be found in the
    default magazine. Refer back to the content model we displayed earlier in
    this tutorial. The related node from magazine is news. The relation is
    special, while it&#39;s a posrel relation. For posrel relations MMBase
    remembers the sequence in which the relations were added. As magazine
    &#60;-&#62; news is a posrel relation, we&#39;ll receive the news nodes
    from MMBase in the same sequence they were related to the magazine.</para>

    <section>
      <title>Retrieving the related nodes</title>

      <para>To retrieve related nodes from a specific node, MMBase supplies
      the &#60;mm:related&#62; tag. Within this tag you can use several
      interesting options to control the way MMBase retrieves the related
      nodes. Refer to the full reference documentation to review all possible
      options to control retrieval of related nodes. For now we&#39;ll have to
      add the following entry to our JSP:</para>

      <para><programlisting>&#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;</programlisting></para>

      <para>The &#34;path&#34; option on this tag instructs MMBase to retrieve
      the related nodes using the original positional sequence of the
      relation, followed by accessing the news node {todo: is path here
      necessary??]. The &#34;fields&#34; option defines the fields that MMBase
      should use to match the results. Finally the &#34;orderby&#34; option
      defines the order in which the resulting nodes are presented [todo: is
      this necessary here??]</para>

      <para>To add this tag to our JSP, we&#39;ll add a new row in our table,
      and within that row we create a new table that gets populated by rows
      with news from our magazine.</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;table&#62;
            &#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;
              &#60;tr&#62;
              &#60;/tr&#62;
            &#60;/mm:related&#62;
          &#60;/table&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>We&#39;ve now setup the basic structure that will create rows with
      news nodes in our table for each related news node found by MMBase. It
      would be nice though, if these values were presented with a heading for
      each column. We want this heading to appear just once before MMBase
      start writing out the first news node. To support this behavior, MMBase
      has a tag &#60;mm:first&#62; that fires upon the first entry in a
      collection.</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;table&#62;
            &#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;
              &#60;mm:first&#62;
                &#60;tr&#62;
                  &#60;td&#62;Title&#60;/td&#62;
                  &#60;td/&#62;
                &#60;/tr&#62;
              &#60;/mm:first&#62;
              &#60;tr&#62;
              &#60;/tr&#62;
            &#60;/mm:related&#62;
          &#60;/table&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>To complete our JSP, we now have to add the title field followed
      by an URL to next JSP that will display our actual news. Displaying the
      title is achieved by using the &#60;mm:field&#62; tag again. Remember we
      used this tag to display the some fields from the default magazine.</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;table&#62;
            &#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;
              &#60;mm:first&#62;
                &#60;tr&#62;
                  &#60;td&#62;Title&#60;/td&#62;
                  &#60;td/&#62;
                &#60;/tr&#62;
              &#60;/mm:first&#62;
              &#60;tr&#62;
                &#60;td&#62;
                  &#60;mm:field name=&#34;title&#34;/&#62;
                &#60;/td&#62;
                &#60;td&#62;
                  &#60;a href=&#39;&#60;mm:url referids=&#34;magid&#34; page=&#34;newsitem.jsp&#34; &#62;
                    &#60;mm:param name=&#34;newsid&#34;&#62;
                      &#60;mm:field name=&#34;number&#34;/&#62;
                    &#60;/mm:param&#62;&#60;/mm:url&#62;&#39;&#62;link
                  &#60;/a&#62;
              &#60;/tr&#62;
            &#60;/mm:related&#62;
          &#60;/table&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>The construction of the URL to access the content of the news
      items deserves some additonal explanation. First we start creatio of a
      default URL by using the &#60;a&#62; tag. In stead of hardcoding our
      &#34;href&#34;, we use data from MMBase by letting MMBase create the URL
      for use by using the &#60;mm:url&#62; tag. Read the full documentation
      on this tag to get more information on the possibilities of this tag. In
      this situation the URL is constructed to the JSP named
      &#34;newsitem.jsp&#34;. Within the &#60;mm:url&#62; tag we use the
      &#60;mm:param&#62; tag to pass necessary information to our
      &#34;newsitem.jsp&#34;, namely the number or id of the newsitem we wish
      to read.</para>

      <para>The resulting URL will appear as follows in our browser:</para>

      <programlisting>http://yourhostname/mmbase-webapp/mmexamples/jsp/mynews/newsitem.jsp?magid=default.mags&#38;newsid=59</programlisting>
    </section>
  </section>
</article>