<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article>
  <title>Creating webpages with the MMBase Tag Library</title>

  <articleinfo>
    <copyright>
      <year>This document is created under the Mozilla Public License</year>
    </copyright>

    <authorgroup>
      <author>
        <firstname>Rogier</firstname>

        <surname>Schaaf (E-id! Internet Strategies B.V.)</surname>
      </author>
      <author>
        <firstname>Michiel</firstname>
        <surname>Meeuwissen</surname>
      </author>
    </authorgroup>

    <revhistory>
      <revision>
        <revnumber>0.1</revnumber>

        <date>august 2002</date>

        <revremark>First draft</revremark>
      </revision>

      <revision>
        <revnumber>0.2</revnumber>

        <date>march 2003</date>

        <revremark>Changed tutorial to use the MyNews application from the
        MMBase distro.</revremark>
      </revision>

      <revision>
        <revnumber>0.3</revnumber>

        <date>Completed tutorial for MyNews application and reworked comments
        from Documentation projectgroup.</date>
      </revision>
    </revhistory>

    <abstract>
      <para>This document offers a tutorial for page designer who want to
      build web pages using the MMBase Tag Library. Readers should be familiar
      with JSP technologies, HTML and have an up-and-running instance of
      MMBase available.</para>
    </abstract>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <para>In this tutorial we try to give page designers a hands-on overview
    of the capabilities of the MMBase Tag Library. This technology, shipped
    with the MMBase content management system, enables page designers in
    developing web pages that retrieve their content from the MMBase system.
    After reading this tutorial and working your way through the examples we
    hope that share our enthusiasm for the MMBase system and the possibilites
    it offers to page designers.</para>

    <section>
      <title>Who should read this tutorial?</title>

      <para>This tutorial is aimed at page designers who develop websites
      using MMBase as the underlying content management system. To succesful
      complete this tutorial, you must be proficient with HTML and JSP
      concepts like tags and tag libraries.</para>
    </section>

    <section>
      <title>What you need to complete this tutorial?</title>

      <para>This tutorial requires a working instance of MMBase with an empty
      cloud available. The name of the cloud is &#34;MMBase&#34;. If you
      don't have an MMBase instance available in your network, ask your
      MMBase administrator to set one up for you.</para>

      <para>To edit your pages you'll need at least some breed of editor.
      The tutorial makes no assumptions on your tooling. You can edit your
      pages with your favorite editor, however the tutorial doesn't
      elaborate on using specific tools for page editing.</para>
    </section>

    <section>
      <title>Conventions</title>

      <para>We have used a number of styles of text and layout in this
      tutorial to help differentiate between different kinds of information.
      The following examples are an example of this markup.</para>

      <example>
        <title>Example</title>

        <para>All examples in this tutorial are separately headed</para>
      </example>

      <caution>
        <para>this indicates a possible problem area</para>
      </caution>

      <warning>
        <para>this indicates a warning</para>
      </warning>

      <important>
        <para>important notices</para>
      </important>

      <note>
        <para>additional information</para>
      </note>

      <tip>
        <para>this indicates a valuable tip</para>
      </tip>
    </section>
    
    <section>
      <title>Tell us what you think</title>

      <para>The MMBase community has worked hard on this tutorial to make it
      enjoyable and useful. Our best reward would be to hear from you that you
      liked working through it and it helped you discovering the possibilities
      of the MMBase tag library.</para>

      <para>Please let us know what you think about it. Tell us what you liked
      best and what aspects of this tutorial you didn't like so we improve
      future releases of this document. The easiest way to give us feedback is
      to drop an email message at:</para>

      <remark><email>info@mmbase.org</email></remark>

      <para>You can also find more information about MMBase on the MMBase
      website. There you'll find sample code, information on latest
      releases, currently running projects and their participating members and
      lots of other interesting information. The address of the website is:</para>

      <remark><link>http://www.mmbase.org</link></remark>
    </section>

    <section>
      <title>Getting help</title>

      <para>If you find a mistake in this tutorial, please inform us about it
      at <link>documentation@mmbase.org</link>.</para>

      <para>If you have additional questions please contact one of the
      companies that support MMBase. You will find a complete listing of
      supporting companies on the MMBase website. Point your browser to:</para>

      <remark><link>http://www.mmbase.org</link></remark>

      <para>Furthermore, you can subscribe to several mailing lists where
      users and developers exchange information. Good chance you'll find
      someone there willing to help you out.</para>
    </section>
  </section>

  <section>
    <title>Preparing the tutorial</title>

    <para>This tutorial builds the MyNews application, a sample application
    that is shipped with the MMBase distribution. Before beginning this
    tutorial, make sure that you have the distribution of MMBase installed and
    running with the demo applications running as well. The MyNews application
    uses the following content model. Take a minute to review this design as
    it will be used throughout this tutorial.</para>

    <figure>
      <mediaobject><imageobject><imagedata fileref="media/cloud.jpg"
      format="JPEG"></imagedata></imageobject></mediaobject>
    </figure>

    <para>As you can see, the central item appears to be our news item. It has
    several relations to other content types within the cloud, some of them
    showing a &#34;posrel&#34; attribute.</para>

    <para>These are special types of relations. Posrel relations offer the
    possibility to add sequencing information on the relation. This way you
    can set the sequence as each relation is added by using an integer
    attribute. Note that setting the &#34;pos&#34; attribute of a posrel
    relation is not done automatically. If you don't supply a value,
    MMBase will set it to its default value being -1.</para>
  </section>

  <section>
    <title>Accessing content stored in MMBase</title>

    <para>When you're developing websites with MMBase as the underlying
    content management system, your pages will need access to the content that
    is stored in MMBase. Content in MMBase is stored in a cloud. Within the
    cloud you'll find nodes. The nodes are the actual pieces of content in
    MMBase. Nodes are organized in content types and relations between content
    types. For example, if you define that every news item you publish on your
    website would contain the news text and an image, then you would have two
    content types in your cloud: content type &#34;news&#34; and content type
    &#34;images&#34;. Furthermore you would define a relation between the
    content types news and image to support displaying images with newsitems.</para>

    <para>For a very basic website you'll need no more than a handful of
    node types. The standard MMBase distribution is supplied with all
    necessary node types for a basic website.</para>

    <para>Now let's have a look at how we can access the cloud from within
    the default J2EE templating facility, e.g. Java Server Pages or short
    JSP's. To access the content cloud, MMBase supplies developers with a
    tag library. We assume you are familiar with the concepts of such a
    library and will not elaborate on it here.</para>

    <para>Every tag library uses it's own namespace. The namespace is
    there to help the system distinguish between different tags from different
    libraries. MMBase tags are all prefixed by default with the string
    &#34;mm&#34;. You are free to choose another prefix, however this usage is
    very common across MMBase developers.</para>

    <para>To prepare your pages to work with MMBase tag libraries the first
    thing you'll have todo is to declare the MMBase tag library in your
    page. The MMBase tag library is declared by the following statement:</para>

    <programlisting>&#60;%@ taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;</programlisting>

    <para>In this declaration you tell the JSP compiler that you will be using
    the MMBase taglibrary and that the tags used by this library are prefixed
    by &#34;mm&#34;. The value for the uri attribute, in this case
    &#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; is the identification of
    the MMBase tag library and should correspond to the entry in the web.xml
    file of your web container configuration. Your WEB.XML should contain the
    following entry:</para>

    <programlisting>&#60;!-- MMBase tag library --&#62;
&#60;taglib&#62;
  &#60;taglib-uri&#62;http://www.mmbase.org/mmbase-taglib-1.0&#60;/taglib-uri&#62;
  &#60;taglib-location&#62;/WEB-INF/mmbase-taglib.tld&#60;/taglib-location&#62;
&#60;/taglib&#62;
</programlisting>

    <para>In the default MMBase distro, this is all preconfigured for you.
    Have a look at the file web.xml in the WEB-INF directory. Look for the
    entry mmbase-taglib. This entry tells your application server that
    you'll be using this library in your JSP's. Furthermore, the
    classes that are used by the mmbase taglib are packaged together with the
    MMBase core code, but if you inspect the file mmbase.jar with a ZIP tool,
    you'll notice the taglib classes.</para>

    <section>
      <title>Importing the default magazine</title>

      <para>To start with this tutorial, we will first start the actual MyNews
      application. Find the URL on the examples screen and click it to startup
      MyNews. MyNews should present you it's first screen.</para>

      <para>[todo:screendump]</para>

      <para>This first screen shows the magazine that's available in the
      demo setup of MMBase, together with the news items associated with that
      magazine and (full right) a link you can click to read the actual news
      item. As you can see, the layout is straightforward without graphics.
      We'll focus on developing this page first, then you can add graphics
      and layout to your liking.</para>

      <para>Below, in the lefthand corner of the screen, you'll find two
      links. Clicking the last link will show you the source of the this page.</para>

      <para>The MyNews application runs with a simple database with a single
      magazine in it. The designers of the database have labelled this
      magazine with a default alias named &#34;default.mags&#34;. To use this
      default magazine we import it into our page by using the
      &#60;mm:import&#62; tag. The &#60;mm:import&#62; tag creates a special
      environment, called a context. Into this context, the developer can
      store variables and their values (Java developers can compare a context
      to a Hashmap like structure).</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;</programlisting>
    </section>

    <section>
      <title>Accessing the cloud</title>

      <para>Any webpage that tries to access content from MMBase will first
      have to initialize access to the cloud. For cloud initialization the
      &#60;mm:cloud&#62; tag is available. Besides a number of exceptions, the
      &#60;mm:cloud&#62; tag encapsulates all other MMBase tags you want to
      use. This means that all other MMBase tags you'll want to use, must
      appear between the &#60;mm: cloud&#62; and &#60;/mm:cloud&#62; tags.
      Note that you get compiler errors when you place tags outside the cloud
      tag.</para>

      <example>
        <para>When using the &#60;mm:cloud&#62; tag there are several
        attributes that you can use. For now, we only use the &#34;name&#34;
        attribute. By default MMBase uses the &#34;mmbase&#34; value for this
        attribute if you omit it. If you want to access a cloud that has
        another name, you'll have to supply this name to be able to access
        that cloud.</para>

        <para>Please refer to the MMBase Tag Library Reference Guide to get a
        full overview of the possible attributes you can use with this tag.</para>

        <para><tip><para>The &#60;mm:cloud&#62; tag offers far more
        functionality that presented here. To learn more about the
        &#60;mm:cloud&#62; tag, please refer to the advanced features section
        of the tutorial where you can learn about using the authentication
        features of this tag.</para></tip></para>

        <para>To access the cloud, add the following tags to our page:</para>

        <programlisting>&#60;%@taglib
        uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34;
        prefix=&#34;mm&#34; %&#62; &#60;mm:import
        externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
        &#60;mm:cloud name=&#34;mmbase&#34;&#62; &#60;/mm:cloud&#62;</programlisting>
      </example>
    </section>

    <section>
      <title>Working with node tags</title>

      <para>Through the tag in the previous chapter, the &#60;mm:cloud&#62;
      tag, we gained access to the MMBase cloud. Next we want access to our
      magazine, a node in the MMBase cloud.</para>

      <para>Now to access our magazine, you'll have to tell MMBase which
      node you wish to access. Every node within MMBase is automatically
      assigned a unique id to distinguish it from other nodes.</para>

      <tip>
        <para>To make your content portable between databases, you can use
        aliases to refer to your nodes, in stead of absolute numerical node
        id's. As you transfer content between databases it's not
        garanteed that nodes receive the same id, while they always keep an
        assigned alias. Usage of aliases will also make your JSP's better
        readable.</para>
      </tip>

      <para>To retrieve a node from MMBase you use the &#60;mm:node&#62; tag.</para>

      <para>To retrieve our magazine we obvisously have two alternate
      approaches. One we can use its node id or we can use the alias that is
      linked to our magazine. As we have no clue to the actual id that MMBase
      used to identify our magazine, we'll have to use its alias. From the
      previous paragraph we know that our magazine has a default alias of
      &#34;default.mags&#34;. We'll use that to access it in our JSP. Add
      the follwing to our JSP:</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34;&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>Using the &#60;mm:node&#62; tag we actually are accessing the node
      of which we imported the alias earlier into our page, using the
      &#60;mm:import&#62; tag. By using the $ directive, MMBase knows that the
      value between quotes is not an actual value of an alias, but an imported
      variable within the context of this page.</para>

      <para>This is quite a complex way of doing things. Another approach, if
      our database would ever only contain one default magazine, would be to
      lookup its node id in MMBase and refer it directly in our page. For
      example, assume we one magazine in our database with id 210, we could
      do:</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;210&#34;&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>The obvious drawback of this structure is that the magazine id is
      now hardcoded into our page, which means we can only show this specific
      magazine. Another option would be to transfer in the node id through the
      session or the request.

   
        TODO (mihxil): This is not correct. 
<!--
        The use of 'externid' precisely avoids this, and does itself the 
        thing described below.
        
        If simply 'id' was to be used, then indeed, no importing from
        request parameters or session would have been performed.

    -->
      </para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;%
  String nodeId = (String) request.getAttribute(&#34;nodeId&#34;);
%&#62;

&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;&#60;%nodeId%&#62;&#34;&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>For this to work you have to write a little Java scriptlet inside
      your template and of course you have to have a preceding mechanism (for
      example a screen where you present all available magazines, from which
      the user can select one) that places the selected magazine into the
      request.</para>

      <para>These are all alternatives to the solution presented in the sample
      MMBase application MyNews. Your actual choice depends on your
      application needs and your personal liking. For this tutorial we will
      stick to the default implementation as presented in the MMBase
      distribution.</para>
    </section>

    <section>
      <title>Summary</title>

      <para>We have now prepared our first JSP that will retrieve a default
      magazine from our preloaded content cloud. We used the
      &#60;mm:import&#62; tag to import our magazine into a context and later
      used the &#60;mm:node&#62; tag to retrieve the magazine from this
      context. Before we could use the &#60;mm:node&#62; tag however, we had
      to tell MMBase which cloud we are going to access. Accessing the cloud
      is the important step you always have to perform to work with MMBase
      content in a JSP environment.</para>

      <para>In the next chapter we'll try to display some of the fields of
      the magazine and display the titles of the available newsitems
      associated with the magazine.</para>
    </section>
  </section>

  <section>
    <title>Working with field tags</title>

    <para>MMBase organizes its content into nodes. Each node consists of
    several fields, containing the actual content of the node. Each field can
    be of a specific type. To access the fields within a node, MMBase offers
    the &#60;mm:field&#62; tag. To access the title and the subtitle of the
    magazine, we tell MMBase to display it by using this tag.</para>

    <para>In our first page we'll now use the &#60;mm:field&#62; tag to
    display fields from the default magazine. Create a table and within the
    table, create two rows. The first row displays the title and the subtitle
    of the default magazine. The second row display the intro and the body of
    the magazine. Your page should now look something like the listing below.</para>

    <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

    <para>Note that we created a table, and inside the table we used the
    &#60;mm:field&#62; tag to display the title and the subtitle of the
    magazine. As a simple formatting option we added &#60;h1&#62; and
    &#60;h2&#62; tags to create the impression of titles. Also notice that all
    MMBase tags are well formed. This means that opening and closing tags
    should always be in balance. JSP compilers are not as forgiving as
    browsers. If your tags are not well formed, you will definitely see
    compile errors in your log. If you see them, correct the errors and try
    compiling the page again.</para>

    <para>Your page is now ready for a first test and should display the
    title,subtitle, intro and body of the default magazine from the MMBase
    content cloud.</para>

    <para>The &#60;mm:node&#62; tag offers more options than the one shown in
    this tutorial. Please refer to the full documentation for more information
    on the use of this tag.</para>
  </section>

  <section>
    <title>Working with related nodes</title>

    <para>Next we want to display the news items that can be found in our
    magazine. Refer back to the content model we displayed earlier in this
    tutorial. One related node from magazine is news. As we have the magazine
    available in our page, we should be able to access its related news nodes.</para>

    <section>
      <title>Retrieving the related nodes</title>

      <para>

        TODO (mihxil): Would it not be clearer to demonstrate mm:relatednodes?

        To retrieve related nodes from a specific node, MMBase supplies
      the &#60;mm:related&#62; tag. Within this tag you can use several
      interesting options to control the way MMBase retrieves the related
      nodes. Refer to the full reference documentation to review all possible
      options to control retrieval of related nodes. For now we add an entry
      to our JSP where we tell MMBase to travel a path between our magazine
      and its news using the posrel relation. As we are only interested in the
      sequence of the relation and the title of each news item in our
      magazine, we tell MMBase to only use the &#34;pos&#34; field from the
      posrel relation and the title from the magazine node. We conclude by
      telling MMBase to order all results by the value in the &#34;pos&#34;
      field, thus retrieving each news node in same sequence as it was
      entered.</para>

      <para><programlisting>&#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;</programlisting></para>

      <para>When you add the above entry, your JSP should now look something
      like below. Note that we also added a &#60;tr&#62; &#60;/tr&#62; entry,
      so that for each found related node from magazine to news, a new row in
      our table will be created.</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;table&#62;
            &#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;
              &#60;tr&#62;
              &#60;/tr&#62;
            &#60;/mm:related&#62;
          &#60;/table&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>We've now setup the basic structure that will create rows for
      each news node found by MMBase. It would be nice though, if these values
      were presented with a heading for each column. We want this heading to
      appear just once before MMBase start writing out the first news node. To
      support this behavior, MMBase has a tag &#60;mm:first&#62; that fires
      upon the first entry in the list.</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;table&#62;
            &#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;
              &#60;mm:first&#62;
                &#60;tr&#62;
                  &#60;td&#62;Title&#60;/td&#62;
                  &#60;td/&#62;
                &#60;/tr&#62;
              &#60;/mm:first&#62;
              &#60;tr&#62;
              &#60;/tr&#62;
            &#60;/mm:related&#62;
          &#60;/table&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>To complete our JSP, we now have to add the title field followed
      by an URL to the next JSP that will display our actual news. Displaying
      the title is achieved by using the &#60;mm:field&#62; tag again.
      Remember we used this tag to display the some fields from the default
      magazine.</para>

      <programlisting>&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:import externid=&#34;magid&#34;&#62;default.mags&#60;/mm:import&#62;
&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:node number=&#34;$magid&#34; id=&#34;mag&#34;&#62;
    &#60;table&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;h1&#62;&#60;mm:field name=&#34;title&#34;/&#62;&#60;/h1&#62;&#60;br/&#62;
          &#60;h2&#62;&#60;mm:field name=&#34;subtitle&#34;/&#62;&#60;/h2&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;mm:field  name=&#34;intro&#34;/&#62;&#60;br/&#62;
          &#60;mm:field  name=&#34;html(body)&#34;/&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
      &#60;tr&#62;
        &#60;td&#62;
          &#60;table&#62;
            &#60;mm:related path=&#34;posrel,news&#34; fields=&#34;posrel.pos,news.title&#34; orderby=&#34;posrel.pos&#34;&#62;
              &#60;mm:first&#62;
                &#60;tr&#62;
                  &#60;td&#62;Title&#60;/td&#62;
                  &#60;td/&#62;
                &#60;/tr&#62;
              &#60;/mm:first&#62;
              &#60;tr&#62;
                &#60;td&#62;
                  &#60;mm:field name=&#34;title&#34;/&#62;
                &#60;/td&#62;
                &#60;td&#62;
                  &#60;a href='&#60;mm:url referids=&#34;magid&#34; page=&#34;newsitem.jsp&#34; &#62;
                    &#60;mm:param name=&#34;newsid&#34;&#62;
                      &#60;mm:field name=&#34;number&#34;/&#62;
                    &#60;/mm:param&#62;&#60;/mm:url&#62;'&#62;link
                  &#60;/a&#62;
              &#60;/tr&#62;
            &#60;/mm:related&#62;
          &#60;/table&#62;
        &#60;/td&#62;
      &#60;/tr&#62;
    &#60;/table&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

      <para>The construction of the URL to access the content of the news
      items may seem a bit obscure and needs some additonal explanation. First
      we start creation of a default URL by using the &#60;a&#62; tag. In
      stead of hardcoding our &#34;href&#34;, we use data from MMBase by
      letting MMBase create the URL use by using the &#60;mm:url&#62; tag.
      Read the full documentation on this tag to get more information on the
      possibilities of this tag. In this situation the URL is pointing to the
      JSP named &#34;newsitem.jsp&#34;. Within the &#60;mm:url&#62; tag we use
      the &#60;mm:param&#62; tag to pass necessary information to our
      &#34;newsitem.jsp&#34;, namely the number or id of the newsitem we wish
      to read.</para>

      <para>The resulting URL will appear as follows in our browser:</para>

      <programlisting>http://yourhostname/mmbase-webapp/mmexamples/jsp/mynews/newsitem.jsp
  ?magid=default.mags&#38;newsid=59</programlisting>

      <para>When we run our JSP in our browser we should see the following
      page appear:</para>

      <graphic fileref="media/mynews.jpg" />
    </section>
  </section>

  <section>
    <title>Constructing the newsitems page</title>

    <para>We've completed the first part of our sample application. Next
    we will expand our sample application with a second page that's
    capable of presenting the news item selected from the first page. First we
    add some familiar stuff like the reference to the MMBase tag library. You
    should incorporate this on every page, otherwise the MMBase tags will
    definitely not work. In this page you see a new feature: the usage of an
    error page. This has nothing to do with MMBase, but is a typical feature
    of the JSP specs. Using an error page, you can create a more elegant way
    to trap unforeseen situations. In stead of presenting the user with a
    stack trace, we can now present an error page where we handle the error
    more gracefully. Building the error page is not within the scope of this
    tutorial, so please review the page yourself if you want to find out more
    about this technique.</para>

    <programlisting>&#60;%@page errorPage=&#34;error.jsp&#34; language=&#34;java&#34; contentType=&#34;text/html; charset=UTF-8&#34; %&#62;
&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:import externid=&#34;newsid&#34; required=&#34;true&#34; /&#62;

  &#60;html&#62;
    &#60;head&#62;
      &#60;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;style.css&#34; /&#62;
    &#60;/head&#62;

    &#60;mm:node number=&#34;$newsid&#34;&#62;
    &#60;/mm:node&#62;

  &#60;/html&#62;
&#60;/mm:cloud&#62;

</programlisting>

    <para>Above you see that, again, we open with the &#60;mm:cloud&#62; tag.</para>

    <tip>
      <para>Although the MMBase tag &#60;mm:cloud&#62; suggests that you can
      name clouds anyway you want, you can only name your cloud
      &#34;mmbase&#34;.</para>
    </tip>

    <para>Next, we import the id of the selected news item from the previous
    page. This value was passed to our new page through the &#60;mm:param&#62;
    tag and the &#60;mm:import&#62; tags retrieves it again.</para>

    <para>Next we use the &#60;mm:node&#62; tag to be able to process the news
    item that we wish to display. Remeber that by using the $ directive we
    don't actually use that value as the node id, but are referring to a
    variable with that name inside the context.</para>

    <para>Next we'll add the title for our browser window and build the
    basic table structure that will display our news item.</para>

    <programlisting>&#60;%@page errorPage=&#34;error.jsp&#34; language=&#34;java&#34; contentType=&#34;text/html; charset=UTF-8&#34; %&#62;
&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:import externid=&#34;newsid&#34; required=&#34;true&#34; /&#62;
  &#60;mm:node number=&#34;$newsid&#34;&#62;
 
    &#60;html&#62;
      &#60;head&#62;
        &#60;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;style.css&#34; /&#62;
        &#60;title&#62;&#60;mm:field  name=&#34;title&#34;/&#62;&#60;/title&#62;
      &#60;/head&#62;

      &#60;body&#62;
      &#60;center&#62;
        &#60;table width=&#34;90%&#34; cellspacing=1 cellpadding=3 border=0&#62;
          &#60;tr&#62;
            &#60;th colspan=&#34;2&#34;&#62;  
              &#60;h2&#62;&#60;mm:field  name=&#34;title&#34;/&#62;&#60;/h2&#62;
                &#60;mm:field name=&#34;subtitle&#34;&#62;
                  &#60;mm:isnotempty&#62;
                    &#60;h3&#62;&#60;mm:write /&#62;&#60;/h3&#62;
                  &#60;/mm:isnotempty&#62;
                &#60;/mm:field&#62;
            &#60;/th&#62;
          &#60;/tr&#62;
        &#60;/table&#62;
      &#60;/center&#62;
    &#60;/html&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

    <para>
      We see here also the the 'isnotempty' tag. The 'isnotempty' tag
      searches for a parent tag of the type 'Writer'. Every tag that
      can produce content, is a Writer tag. The field tag is a simple
      example of a Writer tag. The isnotempy tag now checks if the
      content produced by this parent 'writer' tag is empty, and in
      that case it does not evaluate its body.
    </para>
    <para>
      We should be aware that a writer tag does
      <emphasis>not</emphasis> write anything to the page by itself if
      it has a body. The idea is that the tags in the body do
      something with the content provided by the writer then.
    </para>
    <para>
      So, in this case the content is checked for emptyness, and if
      not, '&#60;h3&#62;&#60;mm:write /&#62;&#60;/h3&#62;' is
      performed. A write-tag without attributes, searches for a parent
      'writer' and writes the content to the page (unless, of course,
      it has a body, because a write-tag is a writer too).
    </para>
    <para>
      But in this case, the write-tag does not have a body, so it
      writes the field. The whole excercise was only done to avoid
      writing empty h3-tags to the page if by change the subtitle
      field of the news items is empty. This happens because those h3
      tags are inside the isnotempty-tag too, so will be skipped if
      the parent writer tag (the field) is empty.
    </para>

    <para>The next step is to complete our full news item in this page.</para>

    <programlisting>&#60;%@page errorPage=&#34;error.jsp&#34; language=&#34;java&#34; contentType=&#34;text/html; charset=UTF-8&#34; %&#62;
&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:import externid=&#34;newsid&#34; required=&#34;true&#34; /&#62;
  &#60;mm:node number=&#34;$newsid&#34;&#62;
 
    &#60;html&#62;
      &#60;head&#62;
        &#60;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;style.css&#34; /&#62;
        &#60;title&#62;&#60;mm:field  name=&#34;title&#34;/&#62;&#60;/title&#62;
      &#60;/head&#62;

      &#60;body&#62;
      &#60;center&#62;
        &#60;table width=&#34;90%&#34; cellspacing=1 cellpadding=3 border=0&#62;
          &#60;tr&#62;
            &#60;th colspan=&#34;2&#34;&#62;  
              &#60;h2&#62;&#60;mm:field  name=&#34;title&#34;/&#62;&#60;/h2&#62;
                &#60;mm:field name=&#34;subtitle&#34;&#62;
                  &#60;mm:isnotempty&#62;
                    &#60;h3&#62;&#60;mm:write /&#62;&#60;/h3&#62;
                  &#60;/mm:isnotempty&#62;
                &#60;/mm:field&#62;
            &#60;/th&#62;
          &#60;/tr&#62;

          &#60;tr&#62;
            &#60;td width=&#34;30&#34;&#62;&#60;/td&#62;
            &#60;td&#62;
              &#60;b&#62;&#60;mm:field  name=&#34;intro&#34;/&#62;&#60;/b&#62;
              &#60;p&#62;&#60;mm:field  name=&#34;html(body)&#34;/&#62;&#60;/p&#62;
            &#60;/td&#62;
          &#60;/tr&#62;


        &#60;/table&#62;
      &#60;/center&#62;
    &#60;/html&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

    <para>This new code prints out the intro of the news item. As you can see
    from the actual page, this intro appears in bold formatting to make it
    stand out more. Next we write the body of the item. Notice that we use a
    special function here called html(). This is a special MMBase functin that
    allows for the creation of HTML from plain text. Refer to [todo] to get
    more information on all available functions and their usage.</para>

    <para>If we go back to our cloud design we know that any news item can be
    related to quite a few other nodes of different types, like magazines and
    authors. It's important to evaluate the design of your template, so
    that you provide solutions for any possible related node. For example, it
    would be a bad design if your model expresses a releation between a
    picture and a news item while your template is not capable of displaying
    the picture (unless ofcourse this is your explicit decision and your user
    agrees with you).</para>

    <para>From our cloud design it appears that any news item could possibly
    have relations with attachments, images, people, URL's and MMEvents.
    For this example we will support relations to images, authors (people) and
    URL's. Other node types are ignored.</para>

    <programlisting>&#60;%@page errorPage=&#34;error.jsp&#34; language=&#34;java&#34; contentType=&#34;text/html; charset=UTF-8&#34; %&#62;
&#60;%@taglib uri=&#34;http://www.mmbase.org/mmbase-taglib-1.0&#34; prefix=&#34;mm&#34; %&#62;

&#60;mm:cloud name=&#34;mmbase&#34;&#62;
  &#60;mm:import externid=&#34;newsid&#34; required=&#34;true&#34; /&#62;
  &#60;mm:node number=&#34;$newsid&#34;&#62;
 
    &#60;html&#62;
      &#60;head&#62;
        &#60;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;style.css&#34; /&#62;
        &#60;title&#62;&#60;mm:field  name=&#34;title&#34;/&#62;&#60;/title&#62;
      &#60;/head&#62;

      &#60;body&#62;
      &#60;center&#62;
        &#60;table width=&#34;90%&#34; cellspacing=1 cellpadding=3 border=0&#62;
          &#60;tr&#62;
            &#60;th colspan=&#34;2&#34;&#62;  
              &#60;h2&#62;&#60;mm:field  name=&#34;title&#34;/&#62;&#60;/h2&#62;
                &#60;mm:field name=&#34;subtitle&#34;&#62;
                  &#60;mm:isnotempty&#62;
                    &#60;h3&#62;&#60;mm:write /&#62;&#60;/h3&#62;
                  &#60;/mm:isnotempty&#62;
                &#60;/mm:field&#62;
            &#60;/th&#62;
          &#60;/tr&#62;

          &#60;tr&#62;
            &#60;td width=&#34;30&#34;&#62;&#60;/td&#62;
            &#60;td&#62;
              &#60;b&#62;&#60;mm:field  name=&#34;intro&#34;/&#62;&#60;/b&#62;
              &#60;p&#62;&#60;mm:field  name=&#34;html(body)&#34;/&#62;&#60;/p&#62;
            &#60;/td&#62;
          &#60;/tr&#62;

          &#60;mm:relatednodes type=&#34;images&#34; max=&#34;3&#34;&#62;
            &#60;mm:first&#62;
              &#60;tr&#62;
                &#60;th colspan=&#34;2&#34;&#62;Related images&#60;/th&#62;
              &#60;/tr&#62;
            &#60;/mm:first&#62;
            &#60;tr&#62;
              &#60;td&#62;
                &#60;img src=&#34;&#60;mm:image template=&#34;s(200)&#34; /&#62;&#34; alt=&#34;&#60;mm:field name=&#34;title&#34; /&#62;&#34; /&#62;
                &#60;mm:last&#62;
                  &#60;/td&#62;&#60;/tr&#62;
                &#60;/mm:last&#62;
          &#60;/mm:relatednodes&#62;

          &#60;mm:relatednodes type=&#34;urls&#34;&#62;
            &#60;mm:first&#62;
              &#60;tr&#62;
                &#60;th colspan=&#34;2&#34;&#62;Related urls&#60;/th&#62;
              &#60;/tr&#62;
            &#60;/mm:first&#62;
            &#60;a href=&#34;&#60;mm:field name=&#34;url&#34;/&#62;&#34;&#62;&#60;mm:field name=&#34;description&#34;/&#62;&#60;/a&#62;
            &#60;br/&#62;
            &#60;mm:last&#62;
              &#60;/td&#62;&#60;/tr&#62;
            &#60;/mm:last&#62;
          &#60;/mm:relatednodes&#62;

          &#60;mm:relatednodes type=&#34;people&#34;&#62;
            &#60;mm:first&#62;
              &#60;tr&#62;
                &#60;th colspan=&#34;2&#34;&#62;Authors&#60;/th&#62;
              &#60;/tr&#62;
            &#60;/mm:first&#62;
            &#60;em&#62;&#60;mm:field name=&#34;firstname&#34; /&#62; &#60;mm:field name=&#34;lastname&#34; /&#62;&#60;/em&#62;
            &#60;br /&#62;
            &#60;mm:last&#62;
              &#60;/td&#62;&#60;/tr&#62;
            &#60;/mm:last&#62;
          &#60;/mm:relatednodes&#62;
        &#60;/table&#62;
      &#60;/center&#62;
    &#60;/html&#62;
  &#60;/mm:node&#62;
&#60;/mm:cloud&#62;</programlisting>

    <para>Here we added the &#60;mm:relatednodes&#62; tag to support retrieval
    of our relevant related nodes. Note the usage of the &#60;mm:last&#62; tag
    to close the pending table row and column. Alternative layouts are also
    possible, as this one somewhat obscures the indenting of your HTML
    document and makes it more difficult to debug if you run into errors.</para>

    <para>Remember that with the first page we used the &#60;mm:related&#62;
    tag and not the &#60;mm:relatednodes&#62; tag. [todo: what's the
    difference?]</para>

    <para>After you completed this step, check your page in your development
    environment. Your page should look something like below figure if all went
    well.</para>

    <graphic fileref="media/newsitem.jpg" />
  </section>

  <section>
    <title>Next steps...</title>

    <para>In this tutorial we showed how to build a sample MMBase application.
    Obviously we have only tipped the possibilities that MMBase offers to page
    designers. There are several things you can do from here:</para>

    <itemizedlist>
      <listitem>
        <para>Explore other sample applications shipped with the MMBase distro</para>
      </listitem>

      <listitem>
        <para>Integrate MMBase Tag Library with your favorite page design tool
        like Macromedia DreamWeaver.</para>
      </listitem>

      <listitem>
        <para>Explore the MMBase Tag Library reference guide where all tags
        are documented and supplied with addtional samples you can try out.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>A bit more about 'providers', 'referrers', 'writers' and so
    on.</title>
    <section>
      <title>Providers/Referrers</title>
      <para>
        In this tutorial we have seen that tags can cooperate, and work
        together. It is good to know a bit about the abstraction behind
        this.
      </para>
      <para>
        The first tag which we encountered was the 'cloud' tag. Every tag
        that wraps functionality needing a cloud must be inside such
        a cloud tag. Those tags are named 'cloudreferrers' (e.g. in the
        taglib referrence). 
      </para>
      <para>
        The cloud tag itself of course then is a 'CloudProvider'. That
        seems a bit silly at first, because perhaps you cannot think
        of something else that could provide a cloud. If you look
        'cloudprovider' up in the reference you see however that there
        is one other cloudprovider, namely the 'transaction'-tag. A
        transaction is a special kind of cloud.
      </para>
      <para>
        This same scheme can be applied to several other concepts. The
        next one of course is the 'node provider' with its counterpart
        the 'node referrer'.
      </para>
      <para>
        Node referrers are many. The most obvious one is of course the
        field tag. A field of course needs to refer to a node. But also
        the two 'related' tags are node referrers, because they are
        related to this node to which they are 'referring'.    
      </para>
      <para>
        The relatednodes tags are of course also node providers. They
        provide nodes, based on the reference to another node.
      </para>
      <para>
        For node referrer tags it does not matter which tag excactly is
        the node provider, they only search for the abstract thing which
        is a 'node provider'. That's why a field-tag can be used inside
        a node-tag or a nodelist-tag and so on.
      </para>
    </section>
    <section>
      <title>id's</title>
      <para>
        Sometimes it will occur that a node referrer is actually in more
        then one node-provider tag at the same time. For example:
        <programlisting><![CDATA[
<mm:node number="123">
   <mm:relatednodes type="urls">
      <mm:field name="title" />
   </mm:relatednodes>
</mm:node>        
]]></programlisting>
      Both 'node' and 'relatednodes' are node providers, the field tag
      is in the body of both. So how does it know now of which node
      provider it should write the 'title' field?
    </para>
    <para>
      The answer is that on default it will use the
      <emphasis>direct</emphasis> parent, so in this case the
      'relatednodes' node provider.
    </para>
    <para>
      If however this is not what you want then you need to know the
      following. Every tag, so also every node provider, can have an
      'id' attribute, and every node referrer tag can have the 'node'
      attribute. So perhaps you understand already, but the example
      will make it clear if not:
      <programlisting><![CDATA[
<mm:node id="abc" number="123">
  <mm:relatednodes type="urls">
      <mm:field node="abc" name="title" />
  </mm:relatednodes>
</mm:node>        
]]></programlisting>
      You see, now the field searches for a node-provider with id
      'abc', and that happens to be the mm:node tag. It still has to be
      <emphasis>inside</emphasis> though.
      </para>
      <para>
        This mechanism work for every provider/referrer pair. So
        cloud-referrers have a 'cloud' attribute, node-referrers have a
        'node' attribute and field-referrers have a 'field' attribute.
      </para>
      <para>
        The 'id' attributes of tags are also used for something
        else. Namely to construct 'taglib variables' about which we will
        ellaborate in the section <xref linkend="taglibvars"
        endterm="taglibvars.title" />.
      </para>      
      <para>
        But first we will tell a bit about another very basic
        provider/referrer pair, namely the writers and writer referrers.
      </para>
    </section>
    <section>
      <title>Writers/Writer referrers</title>
      <para>
        Another name for 'writer' tags could perhaps have been
        'content providers'. These concepts were introduced after the
        observation that there are really two kind of tags. There are
        tags such as the cloud tag and node tag, which do nothing by
        themselves, they merely provide an environment for other
        tags. On the other hand, there are also tags which can
        actually write something to the page, like the field tag, they
        actually provide content, so to say. (hence the chosen name
        'Writer' and the 'content provider' suggestion I just did).
      </para>
      <para>
        Sometimes we do not want to write the content provided by a
        writer tag to the page, but we want something else. Perhaps we
        first want to check if the content is correct, or perhaps we
        want to store the content in a jsp-variable, or perhaps yet
        something else.
      </para>
      <para>
        So here the concept of writerreferrer tags comes in. It works
        precisely the same as the other referrers we talked
        about. Writer referrers work in the body of 'writer'
        tags. Because of this, 'Writer' tags behave a bit different if
        they have a body, because only then they start being real
        'providers', then they simply provide the content to the
        writer-referrers. But if the writer-tag does not have a body,
        then the most sensible thing is done with the content: it is
        written to the page. This default behaviour of writer tags can
        be overriden by their 'write' attribute. Using this attribute
        you can perform tricks as 'silent' field tags, or field tags
        that write also when they have a body.
      </para>
      <para>
        The most simple example of a writer-tag is the write-tag.
        <programlisting><![CDATA[
<mm:write value="hello world" />
]]></programlisting>
        This will for example just write 'hello world' on your
        page. This is a silly thing to do of course, because you could
        as well have used no tag at all for this. In the section about
        taglib variables you will however find out that even the 'value'
        attribute of the write-tag can come in useful.
      </para>
      <para>
        But the write-tag is also a <emphasis>writer referrer</emphasis>
        tag. Of course, when the write-tag works as a writer-referrer
        tag, it simply takes the content of the 'writer' tag it refers
        to and uses that as its own content.  
        <programlisting><![CDATA[
<mm:field name="title">
  <mm:write />
</mm:field>
]]></programlisting>
        So this will simply write the value of the 'title' field. The
        field tag itself did not write because it has a body, and the
        write tag inside it referred to it, and wrote it to the page.
      </para>
    </section>
    <section>
      <title>Condition tags</title>
      <para>
        There are a lot of 'writer referrer' tags, and most of them are
        also 'condition' tags. Condition tags are tags that do evaluate
        their body based on some condition. A condition tag that is also
        writer referrer would naturally do some check on the content
        provided by the writer.
      </para>
      <para>
        For example we could write something to the page if the title
        happens to be empty:
        <programlisting><![CDATA[
<mm:field name="title">
  <mm:isempty>
    This news article has no title!
  </mm:isempty>
  <mm:isnotempty>
     <mm:write /> <!-- write it out then -->
  </mm:isnotempy>
</mm:field>
]]></programlisting>
      </para>
      <para>
        Condition tags always have a 'inverse' attribute to turn the
        condition around. So the following is equivalent:
        <programlisting><![CDATA[
<mm:field name="title">
  <mm:isempty>
    This news article has no title!
  </mm:isempty>
  <mm:isempty inverse="true">
     <mm:write /> <!-- write it out then -->
  </mm:isempy>
</mm:field>
]]></programlisting>
      </para> 
    </section>
    <section>
      <title>List referrers</title>
      <para>
        There is also a bunch of condition tags that are not
        writer referrers but list referrers. List tags are naturally
        those tags that evaluate their body zero or more times.
      </para>
      <para>
        One of the most used list referrers that is also a condition
        is the 'first' tag:
        <programlisting><![CDATA[
<mm:relatednodes type="urls">
  <mm:first>
    <h2>Related urls</h2>
  </mm:first>
 .....
</mm:relatednodes>
]]></programlisting> 
        Of course, the first tag evaluates its body only
        if this is the first iteration of the list. So, if the list
        happens to be empty it is never executed. In the above example
        the mm:first tag is used to write out a 'related urls' header
        if and only if there are actually one or more of such urls. It
        would be silly to write that header if there are no related
        urls, wouldn't it?
      </para>
    </section>
  </section>
  <section id="taglibvars">
    <title id="taglibvars.title">Taglib variables</title>
    <para>
      In the previous section we already mentioned the fact that the
      'id' attribute is also used to create 'taglib variables'. We
      will now demonstrate what those are.     
    </para>
    <para>
      Taglib variables originated from the need to pass around
      information between tags that are not 'inside' each other.
      There is for example a tag that creates a relation between two
      nodes. So, this 'createrelation' tag would need to refer to two
      nodes, and not to one. It would be silly to demand that the
      createrelation tag be in two nodeproviders. So we came up with
      this:      
        <programlisting><![CDATA[
<mm:node id="firstnode" number="123" />
<mm:node id="secondnode" number="456" />
<mm:createrelation role="related" source="firstnode" destination="secondnode" />
]]></programlisting>
    </para>
    <para>
      Now, the two nodes under concern are stored somewhere, and the
      createrelation tag uses it. Perhaps it is a good idea to reveal
      immediately where they are stored. They are stored in a
      'context'.
    </para>
    <section>
      <title>The context tag</title>
      <para>
        Every mmbase taglib page implicitely has a context of
        its own, but you can also explicitely define contextes.
      </para>
      <para>
        You must know that a context can only contain one instance of
        a variable with a certain name. You will get an error message
        if you do not obey this rule. This means that you run into
        trouble when you use an 'id' attribute inside a list, because
        if the list iterates more then once, it will try to put this
        thing with an id more then once in the same context, which it does
        not allow.
      </para>
      <para>
        The solution is to provide the body of a list its own context:
       <programlisting><![CDATA[
<mm:listnodes type="urls">
  <mm:context>
     <mm:node id="thisurl">
     </mm:node>
     <mm:createrelation source="thisurl" destination="othernode" /> 
     ....
  </mm:context>
</mm:listnode>
]]></programlisting> 
        This is the most common use of the context
        tag. It can be used for other things too, but that is beyond
        the scope of this tutorial.
      </para>
      <para>
        Every mmbase tag can write itself to the 'context' and often
        it also can get some information from the context. Therefore,
        every mmbase tag is a 'context referrer' tag (and because of
        that, has a 'context' attribute too)
      </para>
    </section>
    <section>
      <title>The referid attribute</title>
      <para>
        If a tag was written itself to the 'context' by use of its
        'id' attribute, then it must be possible to pick this up
        later, as long - of course - the same context can be referred
        to. For that, the 'referid' attribute is used. Lets make it
        clear with an example.
       <programlisting><![CDATA[
<mm:node id="my_node" number="123">
 ... 
</mm:node>

...

<mm:node referid="my_node">

</mm:node>
]]></programlisting> 
        The first node tag has an 'id' so, it stores itself (or at
        least its 'Node') in the context. The second node tag picks
        this up with the referid attribute, so there we have node 123
        again.
      </para>
      <para>
        Most tags do have a referid attribute, to facilitate this.
      </para>
    </section>
    <section>
      <title>dollar-signs ($)</title>
      <para>
        So now what happens if we assign an id to a writer tag? Then
        of course the obvious thing will happen, namely that the
        associated writer content is written to the context. This can
        be picked up later. So now you can understand what this will
        do:
       <programlisting><![CDATA[
<mm:field id="title" name="title" />
<mm:write referid="title" />
]]></programlisting> 
        Yes, this will write the title field twice.
      </para>
      <para>
        It can happen you want to use the value of some writer in the
        attribute of another tag. This would be the natural thing to
        do:
       <programlisting><![CDATA[
<mm:field id="type" name="type" />
<mm:listnodes type="<mm:write referid="type" />"> <!-- THIS IS NOT POSSIBLE -->
   ..
</mm:listnodes>
]]></programlisting> 
        This can however not be done in taglib (of course because tags
        cannot be used inside attributes in XML).
      </para>
      <para>
        To solve this, we came up with the dollar-sign notation:
        <programlisting><![CDATA[
<mm:field id="type" name="type" />
<mm:listnodes type="$type"> 
   ..
</mm:listnodes>
]]></programlisting> 
        Dollar signs are often used to indicate that something should
        be interpreted as the name of a variable, e.g. in XML based
        languages like XSL and Ant. Also in script languages like Perl
        this is common practice.
      </para>
      <para>
        This will write out the field 'title' three times:
       <programlisting><![CDATA[
<mm:field id="title" name="title" />
<mm:write referid="title" />
<mm:write value="$title" />
]]></programlisting> 
        Do you understand the difference between the 'value' and the
       'referid' attributes?
      </para>
      <para>
        Dollar-sign variables can be used in nearly all attributes. It
        can also be combined with other text:
        <programlisting><![CDATA[
<mm:field id="title" name="title" />
<mm:listnodes type="news" constraints="title LIKE '$title'"> 
   ..
</mm:listnodes>
]]></programlisting> 
        Sometimes it is needed to use curly brackets to indicate where
        the name of the variable ends:
        <programlisting><![CDATA[
<mm:field id="firstname" name="firstname" />
<mm:field id="lastname" name="lastname" />
<mm:listnodes type="news" constraints="title LIKE '${firstname}${lastname}'"> 
   ..
</mm:listnodes>
]]></programlisting> 
      </para>
      <para>
        Also other objects in the context can be used with a
        dollar-sign variable, and usually something sensible happens
        then. For example the dollar-sign value of a node is its
        number. You can use this for example to create an url:
        <programlisting><![CDATA[
<mm:listnodes id="article" type="news">
    <a href="<mm:url page="newsitem.jsp?article=$article" />"><mm:field name="title" /></a>
</mm:listnodes>
]]></programlisting> 
        The url-tag has more features. Please use the reference
        documentation to learn more about it.
      </para>
    </section>
    <section>
      <title>The parent-writer variable: $_</title>
      <para>
        In MMBase taglib there is one dollar sign variable with a
        special meaning, which can be very convenient. If you happen to
        know Perl, you will know from where this syntax was borrowed.
      </para>
      <para>
        Often it is a bit cumbersome to use an id attribute on some
        writer, because that will often also introduce a context tag
        (when you are in a list), and things get a bit messy. So, you
        can also use the $_-variable which is the equivelant of
        &lt;mm:write /&gt;, but then inside an attribute.
        <programlisting><![CDATA[
<mm:listnodes type="news">
  <mm:field name="title">
    <mm:listnodes type="news" constraints="title LIKE '$_'"> 
      ..
    </mm:listnodes>
  </mm:field>
</mm:listnodes>
]]></programlisting> 
        This finds news article with the same title.
      </para>      
    </section>
  </section>
</article>