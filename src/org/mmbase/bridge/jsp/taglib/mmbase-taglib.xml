<?xml version="1.0" encoding="UTF-8"?>
<!--
This "enhanced" tld file will be converted to a "normal" tld and a html file.

To convert this file to a standard .tld file you need  an xslt engine like xalan:
java org.apache.xalan.xslt.Process -Q -IN mmbase-taglib.xml -XSL xml2tld.xslt  > mmbase-taglib.tld

The html-documentation is made in the same manner.
java org.apache.xalan.xslt.Process -Q -IN mmbase-taglib.xml -XSL xml2html.xslt

Another possibility is 'xsltproc'.

The following additional tags are possible between <tag> and </tag>:

  <info>...</info>

  <example>...</example>

  <extends>...</extends>


The following additional tags are possible between <attribute> and </attribute>:

  <requirednote></requirednote> (To note that requirement of this attribute
                                 is dependent on other conditions.)

  <info>...</info>

  <possiblevalue> (Use one or more to list a possible values)
    <value>...</value>
    <info>...</info>
  </possiblevalue>

  <examplevalue> (Use one ore more to give some example values)
    <value>...</value>
    <info>...</info>
  </examplevalue>

Use one or more possiblevalue tags if you want to list all possible values. Use
one or more examplevalue tags is you want to give some example values.
-->
<taglib author="MMBase community">
  <tlibversion>1.0.1</tlibversion>
  <jspversion>1.1</jspversion>
  <shortname>mmbase</shortname>
  <uri>http://www.mmbase.org/mmbase-taglib-1.0</uri>
  <info>
    <p>MMBase consists of a cloud of nodes (also known as objects) which can be related to each
      other. Relations can be seen as nodes with two arms which they use to connect two other
      nodes. Nodes of a specific type (like a person node who holds a person's data) have their own
      node manager (also knows as a builder). A node manager can have functions which are specific for
      the type of nodes it is managing. Just like a cloud can contain different type of nodes it can
      contain different type of relations. And just like specific type of nodes have their own
      node manager, relations of a specific type have their own relation manager.
    </p>
    <p>This relatively simple idea gives rises to rich and sometimes complicated data structures. The
        goal of the MMBase taglib is to make this 'cloud' of data easily accessible, by means of
        XML-like 'tags'. There are:
    <ul>
        <li>tags for 'nodes'</li>
        <li>tags for the 'fields' within the nodes</li>
        <li>tags for 'lists' of nodes</li>
        <li>tags for transactions with the object cloud and security</li>
        <li>tags which have to do with context</li>
        <li>tags, which do not directly relate to the MMBase data cloud, but are simply handy sometimes</li>
      </ul>
    </p>
  </info>
  <tagtypes>
  <type name="all">
  <description>all tags</description>
  <info>
    <p>
      There are quite a lot of MMBase tags. This documents gives an
      overview of all tags of the MMBase Taglib.
    </p>
    <p>
     Tags can use a 'context' to exchange variables with other tags.
     Please read the <a href="#context">documentation for mm:context</a> if you want to know how this works.
    </p>
    <p>Note that the different types of tags are non-exclusive.
        For instance the tag 'maycreate' is a tag which has to do with the context,
        as well as with nodes.
    </p>
    <p>Tags for nodes are: <a href="#node">node</a>
      <a href="#nodeinfo">nodeinfo</a>
      <a href="#maycreate">maycreate</a>
      <a href="#createnode">createnode</a>
      <a href="#maydelete">maydelete</a>
      <a href="#deletenode">deletenode</a>
      <a href="#maywrite">maywrite</a>
      <a href="#createalias">createalias</a>
      <a href="#aliaslist">aliaslist</a>
      <a href="#deletealias">deletealias</a>
      <a href="#maycreaterelation">maycreaterelation</a>
      <a href="#createrelation">createrelation</a>
      <a href="#countrelations">countrelations</a>
      <a href="#image">image</a>
      <a href="#info">info</a>
    </p>
    <p>Tags for fields are: <a href="#field">field</a>
      <a href="#setfield">setfield</a>
      <a href="#isempty">isempty</a>
      <a href="#isnotempty">isnotempty</a>
      <a href="#isgreaterthan">isgreaterthan</a>
      <a href="#islessthan">islessthan</a>
      <a href="#fieldinfo">fieldinfo</a>
      <a href="#fieldlist">fieldlist</a>
    </p>
    <p>Tags for lists of nodes are:
    <a href="#list">list</a>
      <a href="#listnodes">listnodes</a>
      <a href="#related">related</a>
      <a href="#relatednodes">relatednodes</a>
      <a href="#index">index</a>
      <a href="#first">first</a>
      <a href="#last">last</a>
      <a href="#even">even</a>
      <a href="#odd">odd</a>
      <a href="#changed">changed</a>
      <a href="#listcondition">listcondition</a>
      <a href="#listrelations">listrelations</a>
      <a href="#relatednode">relatednode</a>
      <a href="#size">size</a>
    </p>
    <p>Tags for transactions with the object cloud and security: <a href="#transaction">transaction</a>
      <a href="#commit">commit</a>
      <a href="#cancel">cancel</a>
      <a href="#maychangecontext">maychangecontext</a>
      <a href="#setcontext">setcontext</a>
    </p>
    <p>Tags which have to do with context are: <a href="#cloud">cloud</a>
      <a href="#context">context</a>
      <a href="#present">present</a>
      <a href="#notpresent">notpresent</a>
      <a href="#import">import</a>
      <a href="#remove">remove</a>
      <a href="#write">write</a>
      <a href="#compare">compare</a>
    </p>
    <p>Tags that are handy:
      <a href="#timer">timer</a>
      <a href="#log">log</a>
      <a href="#time">time</a>
      <a href="#formatter">formatter</a>
      <a href="#xslt">xslt</a>
      <a href="#include">include</a>
      <a href="#url">url</a>
      <a href="#param">param</a>
      <a href="#leaffile">leaffile</a>
      <a href="#leafinclude">leafinclude</a>
      <a href="#treefile">treefile</a>
      <a href="#treeinclude">treeinclude</a>
    </p>
    <p>Tags belong to one or more groups of tags, 'writers', 'readers', 'referrers' or 'providers'. Each group of tags shares common properties and functionality.
For instance: the tags 'list', 'related', 'createnode', 'createrelation', 'listnodes' all make use of
the functionality in the group 'nodeprovider'. See <a href="mmbase-taglib-groups.html">table of groups and tags</a> for an overview of groups and tags.
First, groups are described in alphabetic order.
Followed by a description of the tags, also in alphabetic order.
See the info about the syntax of the document on how tags and groups are distinguished in the text.
The examples given in this document are basic examples providing the user with a first idea of syntax and functionality of the tags.
See mmexamples/taglib for more elaborated examples.
   </p>
  </info>
  </type>
  <type name="mmbase.basic">
  <description>basic tags</description>
  <info>
    <p>
      These are the most basic MMBase tags, which supply the basic functionality to access MMBase data
      in you pages. An overview of all MMBase tags can be found in <a href="mmbase-taglib-all.html">here</a>.
    </p>
  </info>
  </type>
  <type name="mmbase">
  <description>mmbase tags</description>
  <info>
    <p>
      These are the MMBase tags, which supply the functionality to
      access MMBase data. This includes e.g. security tags but not the
      'utility' tags.
    </p>
  </info>
  </type>
  <type name="mmbase.security">
  <description>security tags</description>
  <info>
    <p>
      These are the MMBase tags which relate to the MMBase security
      system.
    </p>
  </info>
  </type>
  <type name="util">
  <description>utility tags</description>
  <info>
    <p>
      These are the MMBase tags which do directly relate to MMBase
      data, but are merely handy to have.
    </p>
  </info>
  </type>
  <type name="util.context">
  <description>context/variable tags</description>
  <info>
    <p>
       All MMBase utility tags related to 'contexts' and  'taglib
       variables'.
    </p>
  </info>
  </type>
  <type name="list">
  <description>list related tags</description>
  <info>
    <p>
      These are the MMBase tags which do relate to lists (lists and
      sub-tags of lists).
    </p>
  </info>
  </type>
  </tagtypes>
  <taginterface>
    <name>contextreferrer</name>
    <type>util.context</type>
    <info>
      Contextreferrer tags refer to the context. This means that (most of) their attributes can
      contain `context' variables (referred to by '$'). All tags are contextreferrers or specializations of it.
    </info>
    <see tag="context" />
    <attribute>
      <name>context</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    If you want to get it from another context than the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>contextwriter</name>
    <type>util.context</type>
    <extends>contextreferrer</extends>
    <info>
      A contextwriter is a contextreferrer, but it can also write itself to the context (using the
      id attribute).
    </info>
    <see tag="context" />
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    With the `id' attribute you define an unique identifier for this context referrer. Nested tags
    can refer to this directly and other tags by means of a context.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>contextreader</name>
    <type>util.context</type>
    <extends>contextwriter</extends>
    <type>mmbase</type>
    <info>
      A contextreader is a contextwriter, but besides writing itself to the context, it can also
      read itself back from the context.
    </info>
    <see tag="context" />
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Reuses a previously defined tag of the same type.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>listreferrer</name>
    <type>list</type>
    <info>
      A listreferrer tag has to live in the body of list tags.
    </info>
    <attribute>
      <name>list</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    Which list to use, if the tag is in the body of more than one list, and you don't need the
    direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>listprovider</name>
    <type>list</type>
    <info>
      A list provider has a body which is evaluated repeatedly.  If a list is a  contextwriter,
      then in the body of the list a list item is in the context, and afterwards a 'List', which can
      normally be reused with the 'referid' of some list.
    </info>
    <see tag="listreferrer" />
  </taginterface>
  <taginterface>
    <name>condition</name>
    <type>util</type>
    <info>
      Condition tags have a body which is evaluated or not depending on certain attributes or on the
      surrounding tags.
    </info>
    <attribute>
      <name>inverse</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Turns the condition around, such that precisely the inverse will happen. This attribute is
        of course false on default. You can set it to true.
      </info>
      <possiblevalue>
        <value>true</value>
      </possiblevalue>
      <possiblevalue>
        <value>false</value>
      </possiblevalue>
    </attribute>
  </taginterface>
  <taginterface>
    <name>nodeprovider</name>
    <type>mmbase.basic</type>
    <info>
      A node provider makes an MMBase Node available to its body.
    </info>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        A jspvar of type Node can be created.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>clusternodeprovider</name>
    <type>mmbase</type>
    <extends>nodeprovider</extends>
    <info>
      A clusternode provider makes an MMBase Cluster Node available to its
      body. A cluster nodes is in fact a combination of nodes. You can
      get a real node with a sub node tag with the 'element'
      attribute.
    </info>
    <see tag="node" attribute="element" />
  </taginterface>
  <taginterface>
    <name>fieldreferrer</name>
    <type>mmbase</type>
    <info>
      A tag that can live in the body of a fieldprovider tag.
    </info>
    <see tag="fieldprovider" />
    <attribute>
      <name>field</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        If the tag is living in more than one fieldprovider, and you don't need the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>fieldprovider</name>
    <type>mmbase</type>
    <info>
      Fieldprovider tags provide a field to their body. The 'value' of
      the field is not necessary filled, but a fieldprovider still has
      some use then, e.g. to get the 'guiname' of a field (which
      considers language).
    </info>
    <see tag="fieldreferrer" />
  </taginterface>
  <taginterface>
    <name>cloudprovider</name>
    <type>mmbase.basic</type>
    <info>
      Cloudprovider tags provide a cloud to their body. Also a
      `transaction' is a kind of cloud.
    </info>
    <see tag="cloudreferrer" />
  </taginterface>
  <taginterface>
    <name>nodereferrer</name>
    <info>
      A nodereferrer tag is a tag that can (needs to) live in the body of a node
      provider, and uses the node provided by the node provider tag.
    </info>
    <!-- in reality nodereferrer extends cloudreferrer, but only few tags use that -->
    <attribute>
      <name>node</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Which node to use. You can use this attribute if your Nodereferrer is living in more than
        one nodeprovider, and you don't need the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>cloudreferrer</name>
    <type>mmbase</type>
    <info>
      A cloud referrer tag is a tag that needs to live in the body of a cloud tag. This means that
      it can use MMBase data.
    </info>
    <see tag="cloud" />
    <see tag="cloudprovider" />
    <attribute>
      <name>cloud</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    Which cloud to use. If the tag is living in more than one cloud tag, and you want to refer
    to another then the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>writerreferrer</name>
    <type>util</type>
    <info>
      A writerreferrer tag can live in the body of a writer tag, and use the supplied information.
    </info>
    <see tag="writer" />
    <attribute>
      <name>writer</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    Which writer to use. If the tag is living in more than one writer, and you want to refer
    to another then the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>writer</name>
    <type>util</type>
    <info>
      A writer is a tag that can produce output. Normally the default will be to
      write to the page, unless the tag has a body. All tag which
      produce output themselves are 'writers'.
    </info>
    <see tag="write" />
    <see tag="writerreffer" />
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        The name of the variable to be created. Normally, but not always, the
        scope of this variable is the body of the tag. This attribute can never
        contain context variables.
      </info>
    </attribute>
    <attribute>
      <name>vartype</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        <p>
          The type of the variable to be created. Usually there is a reasonable
          default for this attribute. This attribute can never contain context
          variables.
        </p>
        <p>
          The value of this is used for the 'jspvar' if you create it,
          but it is also used for the 'context' variables. It is less
          often essential then, but it is essential to set it right
          e.g. when you want to use the 'isgreaterthan' tag, because
          strings compare differently than numbers.
        </p>
      </info>
      <see tag="isgreaterthan" />
      <possiblevalue>
        <value>Object</value>
        <info>java.lang.Object</info>
      </possiblevalue>
      <possiblevalue>
        <value>String</value>
        <info>java.lang.String</info>
      </possiblevalue>
      <possiblevalue>
        <value>Node</value>
        <info>org.mmbase.bridge.Node</info>
      </possiblevalue>
      <possiblevalue>
        <value>Cloud</value>
        <info>org.mmbase.bridge.Cloud</info>
      </possiblevalue>
      <possiblevalue>
        <value>Transaction</value>
        <info>org.mmbase.bridge.Transaction</info>
      </possiblevalue>
      <possiblevalue>
        <value>decimal</value>
        <info>java.math.BigDecimal</info>
      </possiblevalue>
      <possiblevalue>
        <value>Integer</value>
        <info>java.lang.Integer</info>
      </possiblevalue>
      <possiblevalue>
        <value>Vector</value>
        <info>java.util.Vector. It's better to use List, normally.</info>
      </possiblevalue>
      <possiblevalue>
        <value>List</value>
        <info>java.util.List</info>
      </possiblevalue>
      <possiblevalue>
        <value>Long</value>
        <info>java.lang.Long</info>
      </possiblevalue>
      <possiblevalue>
        <value>Double</value>
        <info>java.lang.Double</info>
      </possiblevalue>
      <possiblevalue>
        <value>Float</value>
        <info>java.lang.Float</info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>write</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>Whether to write to the page or not. Normally the default value will suffice.</info>
      <possiblevalue>
        <value>true</value>
      </possiblevalue>
      <possiblevalue>
        <value>false</value>
      </possiblevalue>
    </attribute>
  </taginterface>
  <tag>
    <name>list</name>
    <extends>clusternodeprovider</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <extends>cloudreferrer</extends>
    <type>mmbase.basic.list</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      Returns a list of (cluster) nodes. Starting at one or more nodes
      traversals are made according to a specified path of
      node managers. One traversal makes up one record returned by the
      list. All possible traversals that can be made starting at one
      or more nodes of the same type and following a specified path
      are returned. Additional attributes can be used to exclude
      records from the returned list or to influence the order of the
      returned list.  Because the returned records can contain more
      than one node (such a record that contains fields from several
      'nodes' is referred to as a 'clusternode') you will have to
      prefix the field name with the node manager name and a dot if you
      want to refer to them.
    </info>
    <see tag="listnodes" />
    <see tag="node" attribute="element"/>
    <attribute>
      <name>nodes</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Comma-separated list of node numbers that should be used as start nodes. The start nodes don't
        have to be a member of the first node manager in the path. For example, if the start nodes
        belong to the second node manager in a path with a length of three node managers, traversals
        will go into two directions at the same time. All traversals that make up a complete path
        are returned.  If a node belongs to the last node manager in a path traversals will go from
        right to left starting at the last node manager.  All start nodes specified in this attribute
        have to belong to the same node manager. Nodes that belong to a different node manager than
        the first node are ignored In case this attribute is not specified all nodes from the first
        node manager in the path are used as start nodes.
      </info>
    </attribute>
    <attribute>
      <name>path</name>
      <required>false</required>
      <requirednote>
          'path' or 'referid' is mandatory.
      </requirednote>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A comma-separated list of node managers which specifies the path
        that should be followed. It is possible to explicitly specify a
        relation manager that should be used to go from one node to an other. If
        no relation manager is specified between two node managers, all possible
        relation managers that can be used to go to the next specified node in
        the path are followed. It is possible to add a digit (0-9) to the
        node manager name and refer to this node manager with his name and this
        digit appended. This can be useful if a node manager is used more than
        once in a path.
      </info>
      <examplevalue>
        <value>mags</value>
      </examplevalue>
      <examplevalue>
        <value>mags,news</value>
      </examplevalue>
      <examplevalue>
        <value>mags,related,news</value>
      </examplevalue>
      <examplevalue>
        <value>mags,news,images</value>
      </examplevalue>
      <examplevalue>
        <value>mags,related,news,related,images</value>
      </examplevalue>
      <examplevalue>
        <value>pools,pools0,urls</value>
      </examplevalue>
      <examplevalue>
        <value>pools1,pools2,urls,pools3</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>fields</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Comma-separated list of fields that should be made available in the
        page. The fields are selected from attributes of the corresponding node
        managers defined in type. It is required to append a prefix to
        each field listed e.g. fields="mags.title,news.title".
      </info>
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
      Constraints to prevent records from being included in the returned list.
      These constraints follow the syntax of the SQL where clause. It's a good
      practice to use uppercase letters for the operators and lowercase letters
      for the field names.
    </info>
      <examplevalue>
        <value>url.number = 100</value>
        <info>!=, &lt;, &gt;, &lt;= and &gt;= can also be used</info>
      </examplevalue>
      <examplevalue>
        <value>person.name = 'admin'</value>
      </examplevalue>
      <examplevalue>
        <value>person.email IS NULL</value>
        <info>indicating the email field should be empty</info>
      </examplevalue>
      <examplevalue>
        <value>person.email LIKE '%.org'</value>
        <info>indication the email should end with .org</info>
      </examplevalue>
      <examplevalue>
        <value>url.number BETWEEN 30 AND 50</value>
      </examplevalue>
      <examplevalue>
        <value>person.name IN ('admin', 'anonymous')</value>
      </examplevalue>
      <examplevalue>
        <value>NOT (url.number = 100)</value>
      </examplevalue>
      <examplevalue>
        <value>person.email IS NOT NULL</value>
        <info>indicating the email field should not be empty</info>
      </examplevalue>
      <examplevalue>
        <value>person.email NOT LIKE '%.org'</value>
        <info>indication the email should not end with .org</info>
      </examplevalue>
      <examplevalue>
        <value>url.number NOT BETWEEN 30 AND 50</value>
      </examplevalue>
      <examplevalue>
        <value>person.name NOT IN ('admin', 'anonymous')</value>
      </examplevalue>
      <examplevalue>
        <value>LOWER(user.name) = 'admin'</value>
        <info>this will also allow `Admin' to be returned</info>
      </examplevalue>
      <examplevalue>
        <value>LENGTH(user.name) &gt; 5</value>
        <info>
        this will only allow name with a length greater than 5 to be
        returned
      </info>
      </examplevalue>
      <examplevalue>
        <value>((number=100) OR (name='admin') AND email LIKE '%.org')</value>
        <info>Linking constraints together using AND and OR</info>
      </examplevalue>
      <examplevalue>
        <value>name='aaa''bbb'</value>
        <info>
        To only retrieve the string aaa'bbb. A single quote can be escaped using
        it twice for every single occurrence.
      </info>
      </examplevalue>
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A comma-separated list of field names on which the returned list should
        be sorted.
      </info>
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A comma-separated list of values indicating whether to sort up
        (ascending) or down (descending) on the corresponding field in the
        orderby  parameter or null if sorting on all fields should be up. The
        value DOWN (case insensitive) indicates that sorting on the
        corresponding field should be down, all other values (including the
        empty value) indicate that sorting on the corresponding field should be
        up. If the number of values found in this parameter are less than the
        number of fields in the orderby parameter, all fields that don't have a
        corresponding direction value are sorted according to the last specified
        direction value.
      </info>
      <possiblevalue>
        <value>UP</value>
      </possiblevalue>
      <possiblevalue>
        <value>DOWN</value>
      </possiblevalue>
      <possiblevalue>
        <value>UP,DOWN,UP</value>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>distinct</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        If set to `true' or `yes' all records who have exactly the same values
        will not be added a second time to the returned list.
      </info>
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The maximum number of records to return.</info>
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The first number of records to skip.</info>
    </attribute>
    <attribute>
      <name>searchdir</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Determines how directionality affects the search. If set to
        "destination" relations in a path will only be followed
        if valid relation exist from source to destination. If set to
        "source" relations in a path will only be followed if
        valid relations exist from destination to source. To follow all
        relations ignoring their directionality set this attribute to
        "all". Any other value for this attribute will follow
        relations the way they are defined (either source to destination,
        destination to source or both).
      </info>
    </attribute>
    <example>&lt;mm:list nodes="123" path="mags,news"
                fields="mags.title,news.number"&gt;
  &lt;mm:first&gt;magazine list&lt;/mm:first&gt;
  &lt;mm:field name="html(mags.title)" /&gt;
&lt;/mm:list&gt;</example>
    <example>&lt;mm:list nodes="123" path="mags,posrel,news"
                orderby="posrel.pos" fields="news.title"&gt;
  &lt;mm:first&gt;news in this magazine, ordered&lt;/mm:first&gt;
  &lt;mm:field name="html(news.title)" /&gt;
&lt;/mm:list&gt;</example>
    <example>&lt;mm:list path="pools,pools0,urls"
                fields="pools.name,pools0.name,urls.url"&gt;
  &lt;mm:field name="html(pools.name)" /&gt;
  &lt;mm:field name="html(pools0.name)" /&gt;
  &lt;mm:field name="html(urls.url)" /&gt;
&lt;/mm:list&gt;</example>
  </tag>
  <tag>
    <name>related</name>
    <extends>clusternodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <type>mmbase.basic</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.RelatedTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      The related tag is the same as the list tag except that it always needs
      one or more start nodes from which the node manager will be taken
      and prefixed to the path specified by the path attribute.
      By default, the node used is that of the parent node tag.
    </info>
    <see tag="list" />
    <see tag="relatednodes" />
    <see tag="node" attribute="element"/>
    <attribute>
      <name>nodes</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Comma separated list of node numbers that should be used instead of the
        default node.
      </info>
    </attribute>
    <attribute>
      <name>path</name>
      <required>false</required>
      <requirednote>
        'path' or 'referid' is mandatory.
      </requirednote>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="path" />
      <info>
        This attribute is the same as the path attribute of the list tag except
        that the first node manager should be omitted. The first node manager
        is implied by the parent node and prefixed to the path automaticly.
      </info>
    </attribute>
    <attribute>
      <name>fields</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="fields" />
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="constraints" />
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="orderby" />
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="directions" />
    </attribute>
    <attribute>
      <name>distinct</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="distinct" />
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="max" />
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="offset" />
    </attribute>
    <attribute>
      <name>searchdir</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="searchdir" />
    </attribute>
    <example>&lt;mm:node number="123"&gt;
  &lt;mm:related  path="mags,news" fields="mags.title,news.number"&gt;
    &lt;mm:first&gt;magazine list&lt;/mm:first&gt;
    &lt;mm:field name="html(mags.title)" /&gt;
  &lt;/mm:related&gt;
&lt;/mm:node&gt;</example>
    <example>&lt;mm:node number="456"&gt; &lt;!-- node 456 is of type mags --&gt;
  &lt;mm:field name="html(title)" /&gt;
  &lt;mm:related path="news0" fields="mags0.title"&gt;
    &lt;mm:first&gt;related magazines&lt;/mm:first&gt;
    &lt;mm:field name="html(mags0.title)" /&gt;
  &lt;/mm:related&gt;
&lt;/mm:node&gt;</example>
  </tag>
  <tag>
    <name>listnodes</name>
    <extends>cloudreferrer</extends>
    <extends>nodeprovider</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <type>mmbase.basic.list</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListNodesTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      The listnodes tag can be used to retrieve nodes managed by a certain
      node manager. The syntax of the attributes are the same as the syntax of
      the attributes of the list tag except that it is not needed to prefix
      the field names with node manager names.
    </info>
    <see tag="list" />
    <see tag="relatednodes" />
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        The name of the node manager managing the type of nodes that should be
        listed.
      </info>
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        See constraints attribute of list, but notice that it is not necessary to prefix the
        field names with `node manager' names. You can put the field names in [] to enable 'key word
        escaping'. E.g. in some databases 'status' is not a valid field name. [status] will
        translate the field name in the right way.
      </info>
      <see tag="list" attribute="constraints" />
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="orderby" />
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="directions" />
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="max" />
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="offset" />
    </attribute>
    <example>&lt;mm:listnodes type="mags"  &gt;
  &lt;mm:first&gt;magazine list&lt;/mm:first&gt;
  &lt;mm:field name="html(title)" /&gt;
&lt;/mm:listnodes&gt;</example>
  </tag>
  <tag>
    <name>relatednodes</name>
    <extends>nodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <type>mmbase.basic.list</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.RelatedNodesTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      The relatednodes tag can be used to retrieve nodes of a certain type
      related to a node of another type. The syntax of the attributes are the
      same as the syntax of the attributes of the list tag except that it is
      not needed to prefix the field names with a node manager name.
      By default, the node used is that of the parent node tag.
    </info>
    <see tag="list" />
    <see tag="listnodes" />
    <see tag="related" />
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <requirednote>
        You cannot use 'orderby' or 'constraints' if you do not use 'type'.
      </requirednote>
      <see tag="listnodes" attribute="type" />
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <requirednote>
        You also need to supply 'type'.
      </requirednote>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="constraints" />
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <requirednote>
        You also need to supply 'type'.
      </requirednote>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="orderby" />
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="directions" />
    </attribute>
    <attribute>
      <name>searchdir</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="searchdir" />
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="max" />
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="list" attribute="offset" />
    </attribute>
    <attribute>
      <name>role</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <example>&lt;mm:node number="Magazine" &gt;
&lt;mm:relatednodes type="news" &gt;
  &lt;mm:first&gt;news in this magazine&lt;/mm:first&gt;
  &lt;mm:field name="html(title)" /&gt;
&lt;/mm:relatednodes&gt;</example>
  </tag>
  <tag>
    <name>even</name>
    <type>list</type>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListEvenTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is an even item</info>
    <see tag="first" />
    <example>See the example for tag 'first'.</example>
  </tag>
  <tag>
    <name>odd</name>
    <type>list</type>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListOddTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is an odd item</info>
    <see tag="first" />
    <example>See the example for tag 'first'.</example>
  </tag>
  <tag>
    <name>changed</name>
    <type>list</type>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListChangedTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
      <p>
        Can be used in a list to determine if this item has changed compared to the previous one.
        The criteria applies to the first field given in the orderby attribute of the accompanying list.
        This field should also be included in the fields attribute of a list or related tag, to make the field
        accessible.
      </p>
      <p>
        The first item of a list is always considered 'changed'.
      </p>
     </info>
    <see tag="first" />
    <see tag="listcondition" />
    <example>See the example for tag 'first'.</example>
  </tag>
  <tag>
    <name>first</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <type>mmbase.basic.list</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListFirstTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is the
    fist item in the list.</info>
    <example>
&lt;mm:listnodes type="typedef"&gt;
 &lt;mm:first&gt;&lt;ul&gt;&lt;/mm:first&gt;
 &lt;li&gt;
   &lt;mm:field name="html(name)"/&gt; is: &lt;mm:field name="html(description)"/&gt;
   Index: &lt;mm:index /&gt;
   &lt;mm:odd&gt;(odd item)&lt;/mm:odd&gt;
   &lt;mm:even&gt;(even item)&lt;/mm:even&gt;
   &lt;mm:changed&gt;(different from previous item)&lt;/mm:changed&gt;
 &lt;/li&gt;
 &lt;mm:last&gt;&lt;/ul&gt;&lt;/mm:last&gt;
&lt;/mm:listnodes&gt;
    </example>
  </tag>
  <tag>
    <name>last</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <type>mmbase.basic.list</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListLastTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is the
    last item in the list.</info>
    <see tag="first" />
    <example>See the example for tag 'first'.</example>
  </tag>
  <tag>
    <name>cloud</name>
    <extends>contextreader</extends>
    <extends>cloudprovider</extends>
    <type>mmbase.basic</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.CloudTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.CloudTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>The cloud tag initializes the cloud to use.</info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The name of the cloud. On default it is 'mmbase'.</info>
      <examplevalue>
        <value>mmbase</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>logon</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The authentication name to use (account). When used together with
      e.g. the method="http" option, validation only succeeds if
      the username equals logon. In this case it is also possible to
      supply a list of usernames here (comma separated)</info>
    </attribute>
    <attribute>
      <name>rank</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The required rank. This is another way to force a special
      user when using method="http".
      </info>
      <possiblevalue>
        <value>administrator</value>
      </possiblevalue>
      <possiblevalue>
        <value>basic user</value>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>loginpage</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        <p>
            You can use the loginpage attribute to specify the (relative) path to a security login page.
            i.e.:
        <pre>
        <![CDATA[
            <mm:cloud name="mmbase" loginpage="login.jsp">
            ...
            </mm:cloud>
        ]]>
        </pre>
            The attribute has effect whenever someone who is not already logged on to the cloud requests the page containing the cloud tag.
            In that case, the tag checks whether the page has been called with a predefined set of parameters.
        </p>
        <p>
            If the page was called with the 'command' parameter set to 'login', the tag assumes a request is being made to log on using the parameters passed.
            The actual names of the parameter passed differs by security method chosen, which is defined by the 'authenticate' attribute.
            For instance, with authenticate method 'username/password', the following additional parameters are recognized:


            cloud: similar to the cloudtag's 'name' attribute
            username: similar to the  cloudtag's 'logon' attribute
            password: similar to the  cloudtag's 'pwd' attribute

            If login succeeds, the page continues and displays normally. If the login fails, or if no 'command=login' attribute was specified, the request is redirected to the page specified in the attribute.
            This 'login apge' can then take care of authentication, i.e. by displaying a form that allows the user to enter and submit the appropriate parameters (username/password) back to the originally called page.
            The page may also implement its own method of authentication.

            The 'command=login' parameter has no effect when the loginpage attribute was not specified.
        </p>
        <p>
        The page should link page to the page which is supplied in the reference parameter.
        The login page itselve should have a parameter 'command' with value 'login', 'authenticate' with the authentication method which is wanted.
        Additional parameters will be passed to the underlying security implementation.

        A simple login page could contain the following jsp-code:
        <pre>
        <![CDATA[
        <%@ taglib uri="http://www.mmbase.org/mmbase-taglib-1.0"  prefix="mm"%>
        <html>
        <mm:import externid="referrer" required="true" />
        <mm:import externid="reason">please</mm:import>
        <mm:write referid="reason">
          <mm:compare value="failed">
            <font color="red">Failed to log in. Try again</font>
          </mm:compare>
        </mm:write>
            <form method="post" action="<mm:url page="$referrer" />" >
            <input type="hidden" name="command" value="login">
            <input type="hidden" name="cloud" value="mmbase"><!-- also default -->
            <input type="hidden" name="authenticate" value="name/password">

            <input type="text" name="username" value="">
            <br />
            <input type="password" name="password" value="">
            <br />
            <input type="submit" name="Login" value="login">
        </form>
        </html>
        ]]>
        </pre>
        When a user is logged in, a call in that page, with parameter 'command' and value 'logout' causes the user to be logged out.
        </p>
        <p>
            There are different situations on which the cloud tag with the attibute loginpage can react, they are:
        </p>
        <ul>
          <li>
            scenario 1 : not logged-in, no parameter with value login:
            Stop current page processing, show the login.jsp, which is
            a form with parameter command with value login. Parameters
            can be specified inside a form. When the button submit is
            pressed, this parameters will be send to the referencing
            page (foo.jsp).  The login page wil be called with a
            'reference' attribute containing this page's URL, and a
            'reason' attribute 'please'.
          </li>
          <li>
            scenario 2 : not logged-in, a parameter with value login:
            The parameters will be retrieved from the request. These
            parameters will be passed to the security
            (CloudContext.getCloud(cloud, authenticate,
            otherparameters)), and the cloud retrieved will be stored
            inside the context.(from now you are logged in) Page
            processing of foo.jsp will continue, unless the
            authentications failed, because then again is redirected
            to the login page, but this time with 'reason' 'failed'.

          </li>
          <li>
            scenario 3: logged-in Page foo.jsp will simply be
            processed. (Unless e.g. the 'logon' attribute is not
            satisfied).
          </li>
          <li>
            scenario 4: logged-in with parameter command with value
            logout The cloud in the session will be removed (you are
            now logged out) and we can continue here from scenario
            1. Can also be done with method='logout'.
          </li>
        </ul>
      </info>
    </attribute>
    <attribute>
      <name>pwd</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The password to use to logon to the cloud.</info>
    </attribute>
    <attribute>
      <name>method</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Describes how to get the authentication information.
      </info>
      <possiblevalue>
        <value>http</value>
        <info>
          Use http protocol to ask name and password
          from the user. If the `logon' attribute is specified too, then
          logging on will fail if the user does not use that
          username. The `pwd' attribute will be ignored.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>logout</value>
        <info>
          When using `http' to log on, the browser will store name and
          password. If you want to log on again, you have to `logout' first.
          In this case the `realm' of the http authentication will be
          changed, and you obtain a new possibility to log on after
          that. The cloud you obtain is anonymous.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>anonymous</value>
        <info>
          Ignore the `logon' attribute and create (or
          reuse) a cloud with an anonymous user.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>asis</value>
        <info>
          Ignore the `logon' attribute and reuse the cloud as
          it is in the session.
        </info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>sessionname</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The name the cloud must get in the session. Using this it is
        possible to avoid retyping your password when
        switching between two sites which both use http
        authentication.
      </info>
    </attribute>
    <attribute>
      <name>authenticate</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The authentication module which must be used by the security
        system. The default is "name/password", which will do in most
        cases.
      </info>
    </attribute>
    <attribute>
      <name>uri</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
       The uri in case the cloud has to be retrieved using the RMMCI.
      </info>
      <possiblevalue>
        <value>local</value>
        <info>
            Get a local cloud
         </info>
      </possiblevalue>
      <possiblevalue>
        <value>rmi://...</value>
        <info>
          RMMCI cloud.
        </info>
      </possiblevalue>
      <examplevalue>
        <value>rmi://www.mmbase.org/remotecontext</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
       The name of the JSP variable to export by cloud.
      </info>
    </attribute>
    <example>
&lt;!-- Show titles of all news articles from user kamer
    (which are in pool kamer_pool) only to user kamer --&gt;
&lt;mm:cloud jspvar="cloud" logon="kamer" method="http"&gt;
logged on as: &lt;bean:write name="cloud" property="user.identifier" /&gt;&lt;br /&gt;
&lt;mm:node number="kamer_pool" id="my_node"&gt;
  &lt;mm:related paths="news" orderby="number" directions="DOWN"&gt;
     &lt;mm:first&gt;
        &lt;!-- show a small heading,
            which also contains the node-number of the pool --&gt;
        &lt;mm:field node="my_node" name="number" /&gt;:
        &lt;mm:field name="number" /&gt;
            &lt;mm:fieldinfo type="guiname" /&gt;
        &lt;/mm:field&gt;:
        &lt;mm:field name="html(title)" /&gt;
            &lt;mm:fieldinfo type="guiname" /&gt;
        &lt;/mm:field&gt;:
     &lt;/mm:first&gt;
     &lt;mm:field name="number" /&gt;: &lt;mm:field name="html(title)" /&gt;&lt;br /&gt;
  &lt;/mm:related&gt;
&lt;/mm:node&gt;
&lt;/mm:list&gt;
&lt;/mm:cloud&gt;
    </example>
    <example>
&lt;!-- To logon on as a different user on my_page.jsp,
    make a ref to a page --&gt;
&lt;mm:cloud method="logout" /&gt;
&lt;% response.sendRedirect("http://my_host/my_page.jsp"); %&gt;
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/cloud.jsp.1" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/cloud.jsp.2" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/logout.jsp.1" />
    </example>
  </tag>
  <tag>
    <name>info</name>
    <extends>writer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.InfoTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
      <p>
        This tag can be used to call getInfo from Module and
        NodeManager. The result of 'getInfo' is a string which on
        default is written to the page. Most of this functionality
        doesn't have much to do with MMBase, and can be acquired with
        JSP or other taglibs too.
      </p>
    </info>
    <attribute>
      <name>nodemanager</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>module</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>command</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The command which is given</info>
    </attribute>
    <example>
a password:     &lt;mm:info nodemanager="users" command="newpassword" /&gt;
user hostname:  &lt;mm:info module="info" command="USER-HOSTNAME" /&gt;
    </example>
  </tag>
  <tag>
    <name>node</name>
    <extends>nodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>cloudreferrer</extends>
    <extends>contextreader</extends>
    <type>mmbase.basic</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.NodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
      A tag to make a node available. Normally it will enclose some field tags, but it is also
      possible to only write to the context, or to a JSP variable.
    </info>
    <attribute>
      <name>number</name>
      <required>false</required>
      <requirednote>
        'number', 'element' or 'referid' must be
        supplied. If none of them, then the node refers to a parent
        NodeProvider.
      </requirednote>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        The node number or alias identifying this node in MMBase.
      </info>
    </attribute>
    <attribute>
      <name>notfound</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
     What to do if the node is not found. The default is to throw an exception.
    </info>
      <possiblevalue>
        <value>skip|skipbody</value>
        <info>Simply skip the body if the node is not found</info>
      </possiblevalue>
      <possiblevalue>
        <value>throw|throwexception</value>
        <info>Throw an exception if the node is not found</info>
      </possiblevalue>
      <possiblevalue>
        <value>null|providenull</value>
        <info>
          Will not throw an exception, but will evaluate the body,
          simply providing 'null' as node. This will probably lead to
          other (less clear) exceptions. But if you prefer it that
          way, it is possible. Use on own risk!
        </info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>element</name>
      <requirednote>Either 'number', 'element' or 'referid' must be supplied.</requirednote>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The name of the node manager, identifying the node in a list or related list tag (clusternode providers).
      </info>
      <see tag="clusternodeprovider" />
    </attribute>
    <example>Assume that node with number has a field title.
Then the following code can be used to
access the value of title:
&lt;mm:node number="456"&gt;
    &lt;mm:field name="html(title)" write="true" /&gt;
&lt;/mm:node&gt;
     </example>
  </tag>
  <tag>
    <name>field</name>
    <extends>writer</extends>
    <extends>fieldreferrer</extends>
    <extends>fieldprovider</extends>
    <extends>nodereferrer</extends>
    <extends>contextreader</extends>
    <type>mmbase.basic</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.FieldTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <info>
      Gets the field `name' from node `node' (can also be list).
    </info>
    <see tag="fieldinfo" />
    <see tag="fieldlist" />
    <see tag="node" />
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        <p>
          The name of the field to get. It could also be field-like `functions' which can be
          recognized by the appearing of parentheses. Which functions are available is principally
          dependent on the node-type.
        </p>
        <p>
          When this attribute is missing, then the field is copied
          from a parent FieldProvider (e.g. another field tag), which
          must be present then.
        </p>
      </info>
      <examplevalue>
        <value>title</value>
        <info>Returns the value of the field `title'</info>
      </examplevalue>
      <examplevalue>
        <value>gui()</value>
        <info>Returns an html `GUI' representation of the node</info>
      </examplevalue>
      <examplevalue>
        <value>gui(handle)</value>
        <info>Returns an html 'GUI' representation of the field `handle'</info>
      </examplevalue>
      <examplevalue>
        <value>cache(s(100))</value>
        <info>Only for images. Returns the icache node number of a image rescaled to 100.</info>
      </examplevalue>
      <examplevalue>
        <value>html(body)</value>
        <info>Returns the body field converted to (bad) HTML.</info>
      </examplevalue>
      <examplevalue>
        <value>wrap(title,10)</value>
        <info>Wraps the title to 10 chars.</info>
      </examplevalue>
    </attribute>
    <example>See the example for tag 'node'.</example>
  </tag>
  <tag>
    <name>function</name>
    <extends>writer</extends>
    <extends>nodereferrer</extends>
    <extends>contextreader</extends>
    <type>mmbase.basic</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.FunctionTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <info>
      Gets the function value of function `name' from node `node' (can also be list).
    </info>
    <see tag="fieldinfo" />
    <see tag="fieldlist" />
    <see tag="node" />
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        <p>
          The name of the function to evaluate.
        </p>
      </info>
      <examplevalue>
        <value>gui</value>
        <info>Returns the value of the field `title'</info>
      </examplevalue>
    </attribute>
  </tag>
  <tag>
    <name>createalias</name>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CreateAliasTag</tagclass>
    <info>
      Lives in a NodeProvider. Creates the bodycontent as an alias for the node.
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    In stead of giving it in the body, you can also indicate it with this parameter.
      </info>
    </attribute>
    <example>
&lt;mm:listnodes type="list" max="1"&gt;
    &lt;mm:createalias&gt;my_list&lt;/mm:createalias&gt;
&lt;/mm:listnodes&gt;
    </example>
  </tag>
  <tag>
    <name>deletealias</name>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.DeleteAliasTag</tagclass>
    <info>
      Lives in a NodeProvider. Deletes the bodycontent as an alias for the node.
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    In stead of giving it in the body, you can also indicate it with this parameter.
      </info>
    </attribute>
    <example>Delete the alias "my_news" from one of the news nodes:
&lt;mm:listnodes type="news"&gt;
    &lt;mm:deletealias name="my_news" /&gt;
&lt;/mm:listnodes&gt;
Why should deletealias live in a NodeProvider ???
    </example>
  </tag>
  <tag>
    <name>listcondition</name>
    <type>list</type>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListConditionTag</tagclass>
    <info>
      Must be used in the body of a list tag. And the body of itself will only be evaluated if some
      condition is true.
    </info>
    <see tag="first" />
    <see tag="last" />
    <see tag="changed" />
    <see tag="even" />
    <see tag="odd" />
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The `value' of the condition, in other words what the condition is, described with a
        string. There is a limited set available now. They are also available as `macro'-tags on this
        tag.
      </info>
      <possiblevalue>
        <value>first</value>
        <info>
            Show only in first row.
          </info>
      </possiblevalue>
      <possiblevalue>
        <value>last</value>
        <info>
            Show only in last row.
          </info>
      </possiblevalue>
      <possiblevalue>
        <value>odd</value>
        <info>
            Show only when row number is odd.
          </info>
      </possiblevalue>
      <possiblevalue>
        <value>even</value>
        <info>
            Show only when row number is even.
          </info>
      </possiblevalue>
      <possiblevalue>
        <value>changed</value>
        <info>
            Show only when this row differs from the previous row (or when it is the first).
          </info>
      </possiblevalue>
    </attribute>
    <example>&lt;mm:listcondition value="first"&gt;(first)&lt;/mm:listcondition&gt;
is equivalent to: &lt;mm:first&gt;(first)&lt;/mm:first&gt;
    </example>
  </tag>
  <tag>
    <name>context</name>
    <type>util.context</type>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ContextTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
      <p>
        'Contextwriter' tags inside a context tag supplying the `id'
      attribute register themselves in the context.  Other tags can
        refer to this id. See for example how the createrelation tag
        works. A special case of a another tag referring to this id is a
        tag of the same type. Normally with an attribute 'referid' you
        could 'repeat' the tag.
      </p>
      <p>
        With the import tag you can explicitly put things from outside
        this context into this context, e.g. from the parameter list or
        from a parent context. It is also possible to put new strings in
        the context with the import tag.
      </p>
      <p>
        There are several ways to refer to objects in the context.
      </p>
      <p>
        When you are adding a new object then the used attribute is
        `id'.
      </p>
      <p>
        The `id' of an `external' object like a request parameter
        is referred to as `externid' (only in the import tag).
      </p>
      <p>
        If you are reusing the same object, for example you have put
        a node in the context, and are using it again then an attribute
        `referid' is used.
      </p>
      <p>
        If some attribute wants to use the value of an object in the
        context, and it is an attribute which can refer to the context
        (which most attributes are), then you can use something like
        ${&lt;context-id;&gt;.&lt;object-id&gt;}. The 'context-id' is
        optional when you are in the same context, or sub-context. The
        value of a context variable can be written to the page with the
        `write' tag. The {}-parentheses are optional too.
      </p>
      <p>
        And finally there are some attributes which can only refer. For
        example if some tag has to live as a child of another tag but
        you want it to refer not to its direct parent, then there should
        be an attribute with the name of the parent in which you can put
        the id of the parent which it has to refer to. For example the
        field tag has an attribute `node'. This kind of referring does
        not function per the ContextTag, and is only good for finding
        ancestor tags. Other tags, like the createrelation tag have
        attributes like `source' and `destination' attributes which also
        simply contain the node id's. Please find the examples.
      </p>
      <p>
        In TCP there is a `tag' called `create', which is comparable to
        `context'.
      </p>
      <p>
        On default a context has no id. The implicit 'page' context
        also doesn't have. If a context has no id, there is no way of
        referring to variables of it if you are not in the context
        itself (or one of the sub-contexts).
      </p>
    </info>
    <see tag="createrelation" />
    <example>Use a context inside another context (inside the default 'context')
                and import parameters:
&lt;mm:import id="hoi"&gt;greetings from amsterdam&lt;/mm:import&gt;
&lt;mm:import id="alias" externid="hoi" required ="true" /&gt;
&lt;mm:context id="other_context"&gt;
  &lt;mm:import externid="alias" /&gt;
  &lt;mm:write referid="alias" /&gt;&lt;br/&gt;
  &lt;mm:import id="hoi_again"&gt;greetings from hilversum&lt;/mm:import&gt;
  &lt;mm:write referid="hoi_again" /&gt;
&lt;/mm:context&gt;</example>
    <example>
      <include base="examples.taglib" href="codesamples/context.jsp.1" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/context.jsp.2" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/context.jsp.3" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/context.jsp.4" />
    </example>
  </tag>
  <tag>
    <name>createrelation</name>
    <extends>nodeprovider</extends>
    <extends>cloudreferrer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CreateRelationTag</tagclass>
    <info>
      Creates a relation between two nodes.
    </info>
    <see tag="maycreaterelation" />
    <attribute>
      <name>role</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
    The role for the new relation.
        </info>
    </attribute>
    <attribute>
      <name>source</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
         The id of the node which will be on the source side of the relation.
    </info>
    </attribute>
    <attribute>
      <name>destination</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
         The id of the node which will be on the destination side of the relation.
    </info>
    </attribute>
    <example>
&lt;mm:cloud&gt;
&lt;mm:transaction id="my_transaction"&gt;
&lt;mm:createnode type="news" id="my_news"&gt;
   &lt;mm:setfield name="title"&gt;Todays news&lt;/mm:setfield&gt;
   &lt;mm:setfield name="subtitle"&gt;There happened a lot today&lt;/mm:setfield&gt;
&lt;/mm:createnode&gt;
&lt;mm:node number="1808" id="my_author" /&gt;
&lt;mm:createrelation role="author" source="my_author" destination="my_news" /&gt;
&lt;/mm:transaction&gt;
&lt;/mm:cloud&gt;
    </example>
  </tag>
  <tag>
    <name>createnode</name>
    <extends>nodeprovider</extends>
    <extends>contextwriter</extends>
    <extends>cloudreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CreateNodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
      Creates a new node.
    </info>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
    The type (NodeManager name) of the new node.
      </info>
      <examplevalue>
        <value>news</value>
      </examplevalue>
      <examplevalue>
        <value>people</value>
      </examplevalue>
    </attribute>
    <example>
    &lt;mm:createnode type="news" id="new_news"&gt;
        &lt;mm:setfield name="title"&gt;Create node example&lt;/mm:setfield&gt;
    &lt;/mm:createnode&gt;
    </example>
  </tag>
  <tag>
    <name>setfield</name>
    <extends>contextwriter</extends>
    <extends>fieldreferrer</extends>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.SetFieldTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.edit.SetFieldTEI</teiclass>
    <info>
      Changes the field `name' from node `node' (can also be list).
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    The name of the field to set. If this field is not set this tag will
    look for a surrounding fieldlist tag to retrieve name and node from.
      </info>
    </attribute>
    <see tag="createnode" />
    <example>See the example for tag 'createnode'.</example>
  </tag>
  <tag>
    <name>transaction</name>
    <extends>contextwriter</extends>
    <extends>cloudreferrer</extends>
    <extends>cloudprovider</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.TransactionTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.edit.TransactionTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <see tag="commit" />
    <see tag="cancel" />
    <info>
     The transaction tag creates a transaction. A transaction is a
     group of actions that should be performed as a whole. If one of
     the things goes wrong, you can roll them back all.
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The name of the transaction.</info>
      <examplevalue>
        <value>my_transaction</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
       The name of the JSP variable to export.
      </info>
    </attribute>
    <attribute>
      <name>commitonclose</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
       If the transaction must be committed after the body. The
       default is true.
      </info>
      <possiblevalue>
        <value>true</value>
      </possiblevalue>
      <possiblevalue>
        <value>false</value>
      </possiblevalue>
    </attribute>
    <example>
&lt;h3&gt;Canceling transaction&lt;/h3&gt;
&lt;mm:transaction name="mytrans" commitonclose="false"&gt;
  &lt;mm:createnode type="news"&gt;
    &lt;mm:setfield name="title"&gt;Test node, created in transaction, canceled&lt;/mm:setfield&gt;
    &lt;mm:setfield name="subtitle"&gt;&lt;mm:write referid="curtime" /&gt;&lt;/mm:setfield&gt;
  &lt;/mm:createnode&gt;
  &lt;mm:cancel /&gt;
&lt;/mm:transaction&gt;
Transaction was canceled, following should not result anything:
&lt;mm:listnodes id="l" type="news" constraints="subtitle = '$curtime'"&gt;
  &lt;mm:field name="gui()" /&gt;
&lt;/mm:listnodes&gt;
&lt;br /&gt;
&lt;h3&gt;Committing transaction&lt;/h3&gt;
&lt;mm:transaction name="mytranz" jspvar="trans"&gt;
  jspvar of type Transaction:
    &lt;%= trans instanceof org.mmbase.bridge.Transaction %&gt;&lt;br /&gt;
  &lt;mm:createnode type="news"&gt;
    &lt;mm:setfield name="title"&gt;Test node, created in transaction, commited&lt;/mm:setfield&gt;
    &lt;mm:setfield name="subtitle"&gt;&lt;mm:write referid="curtime" /&gt;&lt;/mm:setfield&gt;
  &lt;/mm:createnode&gt;
&lt;/mm:transaction&gt;
transaction was commited, following should result anything:
&lt;mm:listnodes id="node" type="news" constraints="subtitle = '$curtime'" max="1"&gt;
  &lt;mm:field name="html(subtitle)"&gt;
    &lt;mm:compare referid2="curtime"&gt;
        YES (created node was &lt;mm:field id="nodenumber" name="number" /&gt;)
        &lt;mm:write referid="nodenumber" session="testnodenumber" /&gt;
        &lt;mm:write referid="node" session="testnode" /&gt;
    &lt;/mm:compare&gt;
  &lt;/mm:field&gt;
   &lt;mm:field name="html(title)" /&gt;
&lt;/mm:listnodes&gt;
&lt;br /&gt;
&lt;h3&gt;Creating relation in transaction&lt;/h3&gt;
&lt;mm:transaction name="mytranc"&gt;
  &lt;mm:node id="node1" number="$nodenumber" /&gt;
  &lt;mm:createnode id="node2" type="news"&gt;
     &lt;mm:setfield name="title"&gt;
        Test node2 with relation, created in transaction
     &lt;/mm:setfield&gt;
     &lt;mm:setfield name="subtitle"&gt;&lt;mm:write referid="curtime" /&gt;&lt;/mm:setfield&gt;
  &lt;/mm:createnode&gt;
  &lt;mm:createrelation source="node1" destination="node2" role="related" /&gt;
&lt;/mm:transaction&gt;
    </example>
  </tag>
  <tag>
    <name>cancel</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CancelTag</tagclass>
    <bodycontent>empty</bodycontent>
    <info>
      The cancel tag can be used to cancel a transaction.
    </info>
    <see tag="transaction" />
    <attribute>
      <name>transaction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The id of the transaction.</info>
    </attribute>
    <example>See the example for tag 'transaction'.</example>
  </tag>
  <tag>
    <name>commit</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CommitTag</tagclass>
    <bodycontent>empty</bodycontent>
    <see tag="transaction" />
    <info>
      The commit tag can be use to commit a transaction.
    </info>
    <attribute>
      <name>transaction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The id of the transaction.</info>
    </attribute>
    <example>See the example for tag 'transaction'.</example>
  </tag>
  <tag>
    <name>deletenode</name>
    <extends>node</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.DeleteNodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
      This tag extends the `node' tag, and is precisely the same. The
      only difference is that after the body the node will be removed.
    </info>
    <attribute>
      <name>deleterelations</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <possiblevalue>
        <value>true</value>
      </possiblevalue>
      <possiblevalue>
        <value>false</value>
      </possiblevalue>
    </attribute>
    <example>
&lt;mm:listnodes type="list" max="1"&gt;
	&lt;mm:maydelete&gt;
		&lt;mm:deletenode deleterelations="true"/&gt;
	&lt;/mm:maydelete&gt;
&lt;/mm:listnodes>&gt;
	</example>
  </tag>
  <tag>
    <name>fieldlist</name>
    <extends>fieldprovider</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <extends>cloudreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.FieldListTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
      A list of fields. A fieldlist can be inside a NodeProvider in
      which case the NodeManager is found by means of the parent
      node. It can also be stand alone, then you have to supply the type
      of the node (the name of the `node manager').
    </info>
    <see tag="fieldinfo" />
    <see tag="nodeinfo" />
    <attribute>
      <name>nodetype</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
    </attribute>
    <attribute>
      <name>fields</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        You can specify a comma separated list of fields you want to
        list too. Use this attribute or the type attribute.
      </info>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The type of fields that should be returned. If not specified, all
        fields are returned.
      </info>
      <possiblevalue>
        <value>create</value>
        <info>
          Defined in NodeManager from the bridge classes, but not used in
          BasicNodeManager. Currently it does nothing special.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>edit</value>
        <info>
          Return only those fields that should appear in the input area of the
          editor.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>list</value>
        <info>
          Return only those fields that should appear in the list area of the
          editor.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>search</value>
        <info>
          Return only those fields that should appear in the search area of the
          editor.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>all</value>
        <info>
          Return all fields.
        </info>
      </possiblevalue>
    </attribute>
    <example>See the example for tag 'nodeinfo'.</example>
  </tag>
  <tag>
    <name>fieldinfo</name>
    <extends>fieldreferrer</extends>
    <extends>contextwriter</extends>
    <extends>writer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.FieldInfoTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <see tag="field" />
    <see tag="fieldlist" />
    <see tag="nodeinfo" />
    <see tag="cloud" />
    <info>
      <p>
        The fieldinfo tag can be used inside a FieldProvider. It's basic
        goal is to provide information about the field, though it
        sometimes can do a little more. It can for example in some case
        also <em>change</em> the field.
      </p>
      <p>
        If the parent fieldprovider is a fieldlist then this fieldlist
        does not always provide a node as well. In that case not every
        type of information is available.
      </p>
    </info>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The type of information which must be returned</info>
      <possiblevalue>
        <value>name</value>
        <info>The name of the field</info>
      </possiblevalue>
      <possiblevalue>
        <value>guiname</value>
        <info>The GUI name of the field (can be in other language)</info>
      </possiblevalue>
      <possiblevalue>
        <value>input</value>
        <info>
      A form entry for the field.  If the surrounding FieldList has an id, the names of the form
      entries will be prefixed with it.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>useinput</value>
        <info>
          <p>
        If you have created a form with type="input" and this form was submitted, then you can
        use type="useinput", and it will get the request/post parameter produced by "input" and
        make the right changes to the parent field.
      </p>
          <p>
        The necessary externid's for this will be implicitly imported in the context. You don't
        have to worry about them.
      </p>
          <p>
        'useinput' is exceptional because it doesn't really produce any 'info' about the field,
        but rather changes it.
      </p>
          <p>
        Can only be used if the parent FieldProvider also provides a Node.
      </p>
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>searchinput</value>
        <info>
      A form entry for the field, fit for use for searching. That means that no textareas will
      be used and such.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>usesearchinput</value>
        <info>
      If you have created a form with type="searchinput" and this form was submitted, then you
      can use this. It will produce a part of a where clause which you can use to construct a
      whole `where' for the list tag you are going to use.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>value</value>
        <info>
          The value of this field. Can only be used if the parent FieldProvider also provides a
          Node.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>guivalue</value>
        <info>
          The guivalue of this field. Can only be used if the parent FieldProvider also provides a
          Node.
        </info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>options</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Specify additional parameters for the presentation/manipulation of the field. [***EXPERIMENTAL***]
      </info>
      <examplevalue>
        <value>datetime</value>
        <info>If the value is a date-time, treat it as a date time combination [***EXPERIMENTAL***]</info>
      </examplevalue>
      <examplevalue>
        <value>time</value>
        <info>If the value is a date-time, treat it as time only [***EXPERIMENTAL***]</info>
        <info>a time thingie[***EXPERIMENTAL***]</info>
      </examplevalue>
      <examplevalue>
        <value>date</value>
        <info>If the value is a date-time, treat it as date only [***EXPERIMENTAL***]</info>
      </examplevalue>
    </attribute>
    <example>See the example for tags 'cloud' and 'nodeinfo'.</example>
  </tag>
  <tag>
    <name>nodeinfo</name>
    <extends>writer</extends>
    <extends>nodereferrer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.NodeInfoTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <info>
      The nodeinfo tag can be used inside a NodeProvider tag, to get certain information about the
      node.
    </info>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <possiblevalue>
        <value>type</value>
        <info>The type of the node (the name of it's NodeManager).</info>
      </possiblevalue>
      <possiblevalue>
        <value>guitype</value>
        <info>The GUI representation of the type (NodeManager) of the node.</info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>nodetype</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
    </attribute>
    <example>&lt;mm:node number="1645"&gt;
Node of type &lt;mm:nodeinfo type="guitype" /&gt;&lt;br /&gt;
  &lt;mm:fieldlist type="edit"&gt;
    &lt;em&gt;&lt;mm:fieldinfo type="guiname" /&gt;&lt;/em&gt;:
        &lt;mm:fieldinfo type="value" /&gt;&lt;br /&gt;
  &lt;/mm:fieldlist&gt;
&lt;/mm:node&gt;
</example>
  </tag>
  <tag>
    <name>present</name>
    <type>util.context</type>
    <extends>condition</extends>
    <extends>contextreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.PresentTag</tagclass>
    <info>
      Checks if a certain variable is present in the parent Context tag.
    </info>
    <see tag="notpresent" />
    <attribute>
      <name>referid</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
    Which context variable.
      </info>
    </attribute>
    <example>
    &lt;mm:context id="other_context"&gt;
      &lt;mm:import id="hoi_again"&gt;greetings from hilversum&lt;/mm:import&gt;
      &lt;mm:present referid="hoi_again"&gt;
        is present in other_context&lt;br /&gt;
      &lt;/mm:present&gt;
    &lt;/mm:context&gt;
    &lt;mm:notpresent referid="hoi_again"&gt;
        is not present in default context&lt;br /&gt;
    &lt;/mm:notpresent&gt;
    </example>
  </tag>
  <tag>
    <name>notpresent</name>
    <type>util.context</type>
    <extends>present</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.NotPresentTag</tagclass>
    <info>
      Checks if a certain variable is missing in the parent Context tag.
    </info>
    <see tag="present" />
    <example>See the example for tag 'present'</example>
  </tag>
  <tag>
    <name>write</name>
    <type>util.context</type>
    <extends>writer</extends>
    <extends>writerreferrer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.WriteTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <info>
      <p>
        The write tag can be used to `export' context variables to something
        else. When you only specify what variable (with the `referid'
        or `value' attribute), then this tag writes to the page
        (therefore it is named `write'), unless it has a body, in
        which case the information is simply available to other tags
        in the body (like another write tag without attributes).
      </p>
      <p>
        This is the behavior of `writer' tags, and this tag is the
        most basic version of that. Being a `writer' tag it also
        supports the `jspvar' attribute with which you can make a JSP
        variable available in the body.
      </p>
      <p>
        In addition to this basic `writer' functionality, the `write'
        tag itself can also write context variables to other storage
        locations, like the session and in cookies.
      </p>
    </info>
    <see tag="import" />
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
    The key of the variable to get. If it is missing (and value is
    missing), then the parent Writer tag is written (if it exist).
      </info>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
    The value to write. In this you can use context variables with "$", the advantage of this
    attribute above the referid attribute is that you can combine variables and add some text of
    your own. The disadvantages relate to complexity and efficiency.
      </info>
    </attribute>
    <attribute>
      <name>session</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        <p>
          You can also put things into the session with this. The value
          of this attribute becomes the key of the session variable.
        </p>
        <p>
          At some other point you can pick up the variable again with
          the import tag (so then the 'externid' attribute of import
          corresponds to the 'session' attribute of write).
        </p>
      </info>
      <see tag="import" attribute="from" />
    </attribute>
    <attribute>
      <name>cookie</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Writing things to cookie is also possible. Analogous to
        writing to the session.
      </info>
    </attribute>
    <example>&lt;!-- write the variable `hoi' to the page --&gt;
&lt;mm:write referid="hoi" /&gt;</example>
    <example>&lt;!-- Create a JSP-variable `greet' from context variable `hoi', write
     `greet' uppercased to the page --&gt;
&lt;mm:write referid="hoi" jspvar="greet"&gt;&lt;%= greet.toUpperCase() %&gt;&lt;/mm:write&gt;</example>

    <example><![CDATA[
<mm:write referid="a" session="abc" />
<mm:import id="b" externid="abc" from="session" />

<!-- would copy the value of 'a' to 'b'. -->
]]></example>
  </tag>
  <tag>
    <name>import</name>
    <extends>contextreferrer</extends>
    <type>util.context</type>
    <!-- import does not extend writer because we don't want the 'writer' attribute of it functional -->
    <tagclass>org.mmbase.bridge.jsp.taglib.ImportTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.ImportTEI</teiclass>
    <info>
    To put objects in the context. That is, import a variable from an
    external source (a parent context, parameters, a form
    (post parameters) or the session). You can also create a new variable
    with this.
    </info>
    <see tag="context" />
    <see tag="write" />
    <see tag="contextreferrer" />
    <attribute>
      <name>id</name>
      <required>false</required>
      <requirednote>Either `id' or `externid' or both must be supplied.</requirednote>
      <rtexprvalue>false</rtexprvalue>
      <info>
        This is the key by which the object will be registered in the
        context. This key may not already exist. You must use the
        remove tag first, if you need to change the value of the
        registered object. If you do not supply this attribute, it is
        supposed to have the same value as `externid' which should be
        present then.
    </info>
    </attribute>
    <attribute>
      <name>externid</name>
      <required>false</required>
      <requirednote>Either `id' or `externid' or both must be supplied.</requirednote>
      <rtexprvalue>true</rtexprvalue>
      <info>
        <p>
    The `externid' is the name of an attribute in the session,
    parameter in the request, or id in the parent context. The
    value of this thing is imported in the current context, with
    the id given by the attribute `id'.
        </p>
        <p>
    If there is no attribute `externid' then the value of the new
    object in the context is taken from the body of this import
    tag. In that way you can create a variable.
        </p>
      </info>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <info>
    If this object is required to be present. If it has to be
    present, then the present tag will always evaluate. If nothing
    can be found by externid and a default value in the
    body is missing too, then an exception will follow if required
    is true.
    </info>
    </attribute>
    <attribute>
      <name>reset</name>
      <!-- Should this be a contextwriter attribute? -->
      <required>false</required>
      <info>
        <p>
          On default, this tag will throw an exception if the id to be
          registered is registered already. This will protect you against
          accidentely using the same id twice, thus obfuscating your
          code.
        </p>
        <p>
          If though you really want it then you can set the attribute
          'reset' to true.
        </p>
        <p>
          Consider also `scoping' your variables with a mm:context tag
          (especially useful for includes and list bodies).
        </p>
      </info>
      <see tag="context" />
    </attribute>
    <attribute>
      <name>from</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Where to search the externid in. On default it is searched in
        several sources, but you can limit it with this attribute. In this way it
        is also possible to get different variables with the same name
        from different sources.
    </info>
      <possiblevalue>
        <value>parent</value>
        <info>
          Imports the variable from a parent context.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>page</value>
        <info>
          Import the variable from the standard JSP 'page
          context'.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>session</value>
        <info>
          Import the variable from the session.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>cookie</value>
        <info>
          Import the variable from a user cookie.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>parameters</value>
        <info>
          Import the variable from a POST (a simple form) or GET (the
          URL) parameter.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>multipart</value>
        <info>
          If the form is a 'multipart' form
          (enctype="multipart/form-data"), which is necessary e.g. for
          images, then you can read the results with
          this. 'postparameters' is a synonym for this, but
          'multipart' is probably a clearer description.
        </info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <see tag="writer" attribute="jspvar" />
      <info>
        If you specify `jspvar' a JSP-variable with this name will be
        created too. It is available after the closing of the
        tag. JSP-variables can also be created with the `write' tag. A
        write tag has more precise scoping possibilities.
      </info>
    </attribute>
    <attribute>
      <name>vartype</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <see tag="writer" attribute="vartype" />
    </attribute>
    <example>&lt;!-- Create a variable `hoi' from the parameter `haj',
     Generate an exception if this parameter is not present --&gt;
&lt;mm:import id="hoi" externid="haj" from="parameters" required="true" /&gt;</example>
    <example>&lt;!-- Create a variable `hoi' from the parameter `haj',
     If this parameter is not present, hoi becomes `hello' --&gt;
&lt;mm:import id="hoi" externid="haj" from="parameters" &gt;hello&lt;/mm:import&gt;</example>
    <example>&lt;!-- Create a variable `hoi' with value `hello' --&gt;
&lt;mm:import id="hoi"&gt;hello&lt;/mm:import&gt;</example>
    <example>&lt;!-- Create a variable `hoi'. The value will come from an external source,
like the parameter list or the session (where ever it is available) --&gt;
&lt;mm:import externid="hoi" /&gt;</example>
  </tag>
  <tag>
    <name>remove</name>
    <type>util.context</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.RemoveTag</tagclass>
    <info>
      Removes an object from the context. Often it is nicer to use
      'anonymous' contexts to avoid naming conflicts.
    </info>
    <see tag="context" />
    <attribute>
      <name>referid</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The id of the variable to be removed>
      </info>
    </attribute>
    <example>
     Set variable 'a' to something.
     &lt;mm:import id="a"&gt;aaaa&lt;/mm:import&gt;
     Set the value of a to another value.
     &lt;mm:remove referid="a" /&gt;&lt;mm:import id="a"&gt;aaab&lt;/mm:import&gt;
    </example>
  </tag>
  <tag>
    <name>url</name>
    <type>util</type>
    <extends>writer</extends>
    <extends>contextwriter</extends>
    <extends>cloudreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
      <p>
        Returns an URL with parameters from the context. Parameters can
        be specified in three ways:
      </p>
      <ul>
        <li>
          Simply write it in the 'page' attribute (with ? and
          &amp;amp; (or simply &amp; if you don't produce XHTML), you
          can use the $-notation to refer to context variable values.
        </li>
        <li>
          Use the 'referids' attribute to specify a list of context
          variables to add to the URL. The disadvantage is that you
          can't use another name for the parameter then the name of the
          variable.
        </li>
        <li>
          Use 'mm:param' sub-tags.
        </li>
      </ul>
      <p>
        This tag also takes care of the 'application' context if you
        start the page attribute with '/'. This makes your
        applications better portable.
      </p>
      <p>
        It also does an URLEncode, which can be necessary if the
        browsers does not support cookies and your page needs the
        session.
      </p>
      <p>
        You don't need it for URLs outside your application server
        application. It is very advisable to use it otherwise.
      </p>
    </info>
    <see tag="param" />
    <see tag="image" />
    <attribute>
      <name>referids</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        Specify which parameters. A comma separated list of context
        variable id's.
      </info>
    </attribute>
    <attribute>
      <name>page</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        The url to refer to. If not specified, then it becomes the
        result of getRequestURI.
    </info>
    </attribute>
    <attribute>
      <name>escapeamps</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
          Whether or not to escape &amp;'s in the query
          string. According to XHTML is must. But perhaps you don't
          want XHTML but something else. Default it is true.
    </info>
    </attribute>
    <example>
    &lt;mm:url page="codesamples/index.jsp"&gt;
        &lt;mm:param name="page" value="home" /&gt;
    &lt;/mm:url&gt;
    generates: codesamples/index.jsp?page=home
    </example>
  </tag>
  <tag>
    <name>image</name>
    <extends>nodereferrer</extends>
    <extends>writer</extends>
    <extends>contextwriter</extends>
    <type>mmbase.basic</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.ImageTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.StringWriterTEI</teiclass>
    <info>
      <p>
        Returns an URL to the image servlet. This is a NodeReferrer
        and consequently has to live as a child of a (image) node.
      </p>
      <p>
        Using this tag makes your pages more portable to other system,
        and hopefully less sensitive for future changes in how the
        image servlet works.
      </p>
    </info>
    <attribute>
      <name>template</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        <p>
          A 'transformation' template.
        </p>
        <p>
          In the font option, mm: stands for 'mmbase configuration
          directory'. In this way it is easy to make sure that fonts
          are available.
        </p>
      </info>
      <examplevalue>
        <value>s(100x100)</value>
      </examplevalue>
      <examplevalue>
        <value>s(200x200!)+font(mm:fonts/Arial.ttf)+fill(ffffff)+pointsize(20)+gravity(NorthEast)+text(0,20,'MM Base')</value>
      </examplevalue>
      <examplevalue>
        <value>s(180)+modulate(120,0)+gamma(1/1/2)+bordercolor(8c9c23)+border(10x0)</value>
      </examplevalue>
      <examplevalue>
        <value>s(200)+fill(ffffff)+circle(20,20 30,30)</value>
      </examplevalue>
      <examplevalue>
        <value>s(200x200!)+part(100,100,150,150)</value>
      </examplevalue>
      <examplevalue>
        <value>s(200)+fill(ffffff)+draw(rectangle 100,100 150,150)+dia+flipx</value>
      </examplevalue>
      <examplevalue>
        <value>s(200)+colorizehex(f01010)</value>
      </examplevalue>
      <examplevalue>
        <value>s(200)+f(gif)+paint(10)</value>
      </examplevalue>
    </attribute>
    <example>
    &lt;mm:node number="&lt;%= image_number %&gt;"&gt;
        &lt;img src="&lt;mm:image template="s(100)" /&gt;" width="100" border="0"&gt;
    &lt;/mm:node&gt;
    </example>
  </tag>
  <tag>
    <name>attachment</name>
    <extends>nodereferrer</extends>
    <extends>writer</extends>
    <extends>contextwriter</extends>
    <type>mmbase.basic</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.ImageTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.StringWriterTEI</teiclass>
    <info>
      <p>
        Returns an URL to the attachment servlet. This is a NodeReferrer
        and consequently has to live as a child of a (attachment) node.
      </p>
      <p>
        Using this tag makes your pages more portable to other system,
        and hopefully less sensitive for future changes in how the
        attachment servlet works.
      </p>
    </info>
  </tag>
  <tag>
    <name>include</name>
    <type>util</type>
    <extends>url</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.IncludeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
      <p>
        Does an include. This tag is rather similar to mm:url, but in
        stead of returning the url, it returns the page itself. In that
        respect it is also very similar to jsp:include. The advantage
        above jsp:include is that this tag is aware of the context
        parameters and knows the 'param' sub tag.
      </p>
      <p>
        mm:include also can be used to include 'external' URL's, so
        you can 'steal' from another server. But <em>be aware</em>
        that this causes your server to do an http-request itself to
        another server. It depends on your server's configuration and
        of its network's setup, if it is allowed to do this.       
      </p>      
      <p>
        If this version of MMBase is running on the Orion application
        server even 'internal' URL's, so pointing to files on the same
        server, will work like this. In other words, orion will do an
        http-request to itself. This was the way the include-tag
        worked always in MMBase 1.5.        
      </p>
      <p>
        You can also consider using the jsp &lt;%@include file=""
        %&gt;. This will include the code of that page in place and
        compile it together with your page. So in that aspect it is
        much different from this tag, which "includes" a stand-alone
        page. Using the 'context' tag you can still give this included
        file its own scope. If this will do the trick for you then it
        is perhaps best to use this rather then the mm:include tag.
      </p>
      <p>
        See <a
        href="http://java.sun.com/products/jsp/tags/10/tags.html">JSP
        Syntax Reference</a>
      </p>
    </info>
    <attribute>
      <name>debug</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        For debugging you can print the used URL in the page as comments..
      </info>
      <possiblevalue>
        <value>none</value>
        <info>No debugging on the page (default)</info>
      </possiblevalue>
      <possiblevalue>
        <value>html</value>
        <info>Use html comments</info>
      </possiblevalue>
      <possiblevalue>
        <value>css</value>
        <info>Use css comments</info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>cite</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
         Whether to 'cite' the page. This only works for 'relative' urls on the same server. Only
         also if you have sufficiently rights to do that. Citing means that the page is acquired
         directly, so without interpreting/compiling by the web-server. Mainly useful for
         documenation of page-creating/taglib itself.
      </info>
    </attribute>
    <see tag="context" />
    <see tag="param" />
    <see tag="url" />
    <example>&lt;mm:include page="codesamples/index.jsp.1" /&gt;
    </example>
  </tag>
  <tag>
    <name>compare</name>
    <type>util.context</type>
    <extends>condition</extends>
    <extends>writerreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.CompareTag</tagclass>
    <info>
      Compares the value of a context variable to a String value. Only if
      they are equal the body is evaluated.
    </info>
    <see tag="isempty" />
    <see tag="isnotempty" />
    <see tag="isgreaterthan" />
    <see tag="islessthan" />
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Which context variable to compare. It this attribute is
        missing, then the value of the parent 'writer' is taken.
      </info>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <requirednote>Either `value' or `referid2' must be present.</requirednote>
      <info>
        The value to which you want to compare, this is always a String.
      </info>
    </attribute>
    <attribute>
      <name>referid2</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <requirednote>Either `value' or `referid2' must be present.</requirednote>
      <see tag="writer" attribute="vartype" />
      <info>
        The value can also be another context variable, which is not
        necessarily a string. The type (set by 'vartype') is taken
        into account.
      </info>
    </attribute>
    <example>
    &lt;mm:import id="carry_out"&gt;yes&lt;/mm:import&gt;
    &lt;mm:compare referid="carry_out" value="yes"&gt;
        Body should be carried out!
    &lt;/mm:compare&gt;
    &lt;mm:compare referid="carry_out" value="no"&gt;
        Body should not be carried out!
    &lt;/mm:compare&gt;
    </example>
  </tag>
  <tag>
    <name>isnotempty</name>
    <type>util</type>
    <extends>condition</extends>
    <extends>writerreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsNotEmptyTag</tagclass>
    <info>
      Checks if parent writer, or contextvar, is not empty.
    </info>
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="compare" attribute="referid" />
    </attribute>
    <example>
          &lt;mm:field name="html(title)"&gt;
            &lt;mm:isempty&gt;
              No title!
            &lt;/mm:isempty&gt;
            &lt;mm:isnotempty&gt;
              &lt;mm:write /&gt;
            &lt;/mm:isnotempty&gt;
          &lt;/mm:field&gt;
     </example>
  </tag>
  <tag>
    <name>isempty</name>
    <type>util</type>
    <extends>condition</extends>
    <extends>writerreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsEmptyTag</tagclass>
    <info>
      Checks if parent writer is empty.
    </info>
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <see tag="compare" attribute="referid" />
    </attribute>
    <example>
          &lt;mm:field name="html(title)"&gt;
            &lt;mm:isempty&gt;
              No title!
            &lt;/mm:isempty&gt;
            &lt;mm:isnotempty&gt;
              &lt;mm:write /&gt;
            &lt;/mm:isnotempty&gt;
          &lt;/mm:field&gt;
     </example>
    <example>
        &lt;mm:field name="html(title)" write="true"&gt;
          &lt;mm:isempty&gt;
            No title!
          &lt;/mm:isempty&gt;
        &lt;/mm:field&gt;
     </example>
    <example>
      <include base="examples.taglib" href="codesamples/empty.jsp" />
    </example>
  </tag>
  <tag>
    <name>isgreaterthan</name>
    <type>util</type>
    <extends>compare</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsGreaterThanTag</tagclass>
    <info>
      The body evaluated if the compared value is greater. Works for
      numbers, but also for strings. If you want to evaluate 'is
      greater than or equal' then try &lt;mm:islessthan inverse="true" ... /&gt;
    </info>
    <see tag="islessthan" />
    <example>
&lt;mm:import id="number" vartype="integer" &gt;5&lt;/mm:import&gt;
&lt;mm:import id="compare" vartype="integer" &gt;6&lt;/mm:import&gt;
&lt;mm:write referid="number"&gt;
   &lt;mm:isgreaterthan value="$compare"&gt;
       &lt;mm:write /&gt; greater than &lt;mm:write referid="compare" /&gt;
   &lt;/mm:isgreaterthan&gt;
   &lt;mm:islessthan value="$compare"&gt;
       &lt;mm:write /&gt; less than &lt;mm:write referid="compare" /&gt;
   &lt;/mm:islessthan&gt;
&lt;/mm:write&gt;
    </example>
  </tag>
  <tag>
    <name>islessthan</name>
    <type>util</type>
    <extends>compare</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsLessThanTag</tagclass>
    <info>
      The body evaluated if the compared value is smaller. This is more
      or less the inverse of isgreaterhan, of course, but not precisely.
    </info>
    <see tag="isgreaterthan" />
    <example>See the example for tag 'isgreaterthan'.</example>
  </tag>
  <tag>
    <name>aliaslist</name>
    <type>mmbase.list</type>
    <extends>nodereferrer</extends>
    <extends>writer</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.AliasListTag</tagclass>
    <info>
      This is a list which can only live under a NodeProvider. In the body you can use the `writer'
      functionality to actually write out the alias.
    </info>
    <example>
&lt;mm:listnodes type="list"&gt;
  &lt;mm:field name="html(title)" /&gt;
  has the following aliases:
  &lt;mm:aliaslist&gt;
     &lt;mm:write /&gt; &lt;mm:last inverse="true"&gt;,&lt;/mm:last&gt;
  &lt;/mm:aliaslist&gt;&lt;br/&gt;
&lt;/mm:listnodes&gt;
  </example>
  </tag>
  <tag>
    <name>maywrite</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <type>mmbase.security</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayWriteTag</tagclass>
    <info>
    Check if node may be changed.
    </info>
    <example>
&lt;mm:listnodes type="list" max="1"&gt;
    &lt;mm:maywrite&gt;
        &lt;mm:setfield name="title"&gt;New title&lt;/mm:setfield&gt;
    &lt;/mm:maywrite&gt;
&lt;/mm:listnodes&gt;
    </example>
  </tag>
  <tag>
    <name>maydelete</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <type>mmbase.security</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayDeleteTag</tagclass>
    <info>
    Check if node may be deleted.
    </info>
    <see tag="deletenode" />
    <example>See the example for tag 'deletenode'.
    </example>
  </tag>
  <tag>
    <name>maycreate</name>
    <extends>cloudreferrer</extends>
    <extends>condition</extends>
    <type>mmbase.security</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayCreateTag</tagclass>
    <info>
    Check if node may be created.
    </info>
    <attribute>
      <name>type</name>
      <required>true</required>
    </attribute>
    <example>
&lt;mm:maycreate type="list"&gt;
    &lt;mm:createnode type="list" id="this_list"&gt;
        &lt;mm:setfield name="title"&gt;Create node example&lt;/mm:setfield&gt;
    &lt;/mm:createnode&gt;
&lt;/mm:maycreate&gt;
    </example>
  </tag>
  <tag>
    <name>maycreaterelation</name>
    <extends>cloudreferrer</extends>
    <extends>condition</extends>
    <type>mmbase.security</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayCreateRelationTag</tagclass>
    <info>
    Check if a relation may be created.
    </info>
    <attribute>
      <name>role</name>
      <required>true</required>
      <see tag="createrelation" attribute="role" />
    </attribute>
    <attribute>
      <name>source</name>
      <required>true</required>
      <see tag="createrelation" attribute="source" />
    </attribute>
    <attribute>
      <name>destination</name>
      <required>true</required>
      <see tag="createrelation" attribute="destination" />
    </attribute>
    <see tag="createrelation" />
    <example>
&lt;mm:maycreate type="list"&gt;
    &lt;mm:createnode type="list" id="this_list"&gt;
        &lt;mm:setfield name="title"&gt;
            Node with relation to page 97
        &lt;/mm:setfield&gt;
    &lt;/mm:createnode&gt;
&lt;/mm:maycreate&gt;
&lt;mm:node number="97" id="my_page" /&gt;
&lt;mm:maycreaterelation role="posrel"
    source="my_page" destination="this_list"&gt;
    &lt;mm:createrelation role="posrel"
        source="my_page" destination="this_list" /&gt;
&lt;/mm:maycreaterelation&gt;
&lt;delete referid="this_list"&gt;
&lt;delete referid="my_page"&gt;
    </example>
  </tag>
  <tag>
    <name>maylink</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <type>mmbase.security</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayLinkTag</tagclass>
    <info>
    This tag will be removed!
    </info>
  </tag>
  <tag>
    <name>maychangecontext</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <type>mmbase.security</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayChangeContextTag</tagclass>
    <info>
    Check if the context of a node may be changed.
    </info>
  </tag>
  <tag>
    <name>setcontext</name>
    <extends>nodereferrer</extends>
    <type>mmbase.security</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.SetContextTag</tagclass>
    <info>
      <p>
        Change the context of a node. This has nothing to do with the
        `contexts' of the taglib, but with security. With every node a
         `context' is associated (in fact the `owner' field is currently
        used for this), by which is is determined who may do what to
        it.
      </p>
      <p>
        You'll need this if you are creating an editor and want to add
        the possibility to change the rights on a node.
      </p>
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        In stead of giving the name of the context in the body, you can also
        indicate it with this parameter.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>countrelations</name>
    <extends>writer</extends>
    <extends>nodereferrer</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.CountRelationsTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.IntegerWriterTEI</teiclass>
    <info>
      Can be used inside a node tag to show the number of relations the node
      has.
    </info>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        If specified only the number of relations to the type of nodes
        specified by this attribute are returned.
      </info>
    </attribute>
    <example>
&lt;mm:listnodes type="list"&gt;
    &lt;mm:field name="html(title)" /&gt; has &lt;mm:countrelations /&gt; relation(s)&lt;br/&gt;
&lt;/mm:listnodes&gt;
    </example>
  </tag>
  <tag>
    <name>listrelations</name>
    <type>mmbase.list</type>
    <extends>nodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListRelationsTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
       List the relations belonging to this nodes. Relations are nodes too.
    </info>
    <see tag="relatednode" />
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>Only list the relations where the other node is of this type.</info>
    </attribute>
    <attribute>
      <name>role</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>Only list the relations which are of this role.</info>
    </attribute>
    <example>
&lt;mm:listnodes type="news"&gt;
    &lt;mm:field name="html(title)" /&gt;
    &lt;mm:listrelations role="posrel" type="page"&gt;
        is news item &lt;mm:field name="pos" /&gt; on page
        &lt;mm:relatednode&gt;&lt;mm:field name="html(title)" /&gt;&lt;/mm:relatednode&gt;
    &lt;/mm:listrelations&gt;
    &lt;br/&gt;
&lt;/mm:listnodes&gt;
    </example>
  </tag>
  <tag>
    <name>relatednode</name>
    <type>mmbase.list</type>
    <extends>nodeprovider</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.RelatedNodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
      For use under listrelations tag. With this you can easily find
      the other node (it uses the 'snumber' and 'dnumber' fields for you.
    </info>
    <see tag="listrelations" />
    <attribute>
      <name>listrelations</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        To refer to another listrelations tag then the direct parent.
    </info>
    </attribute>
    <example>See the example for tag 'listrelations'.
    </example>
  </tag>
  <tag>
    <name>size</name>
    <type>list</type>
    <extends>contextwriter</extends>
    <extends>writer</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.SizeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.IntegerWriterTEI</teiclass>
    <info>
      The size of the current list.
    </info>
    <example>
&lt;mm:listnodes type="list"&gt;
    &lt;mm:first&gt;&lt;mm:size /&gt;&lt;/mm:first&gt;
&lt;/mm:listnodes&gt;
    </example>
    <example>
&lt;mm:list path="list"&gt;
    &lt;mm:first&gt;&lt;mm:size /&gt;&lt;/mm:first&gt;
&lt;/mm:list&gt;
    </example>
  </tag>
  <tag>
    <name>index</name>
    <type>list</type>
    <extends>contextwriter</extends>
    <extends>writer</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.IndexTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.IntegerWriterTEI</teiclass>
    <info>
      The index of the current item of the current list.
    </info>
    <see tag="first" />
    <see tag="last" />
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
         Where do you want to start counting. Default this is 1.
        </info>
    </attribute>
    <example>See the example for tag 'first'.</example>
  </tag>
  <tag>
    <name>timer</name>
    <type>util</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.debug.TimerTag</tagclass>
    <info>
      <p>
        Debug tag for measuring performance. It measures the duration of
        its body. Child tags can possibly communicate with this tag to
        measure themselves which will be logged on 'debug' level.
        Total times per tag type are logged on 'service' level at the
        end of the Timer tag (sorted per unique combinations of id and tag type).
      </p>
      <p>
        This tag should only be used when tuning your page for speed,
        and removed when you're finished.
      </p>
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Give a name to the timer to easily find it in the log.
      </info>
    </attribute>
    <extends>contextreferrer</extends>
    <example>
    &lt;mm:timer name="listnodes timer"&gt;
        &lt;mm:listnodes type="list"&gt; &lt;/mm:listnodes&gt;
    &lt;/mm:timer&gt;
    Generates in mmlog4j.log:
    19:11:26,530 INFO  - Starting timer listnodes timer
    19:11:26,546 INFO  - Timer listnodes timer totals:
         org.mmbase.bridge.jsp.taglib.debug.TimerTag: 16.0 ms
         org.mmbase.bridge.jsp.taglib.ListNodesTag: 16.0 ms
    </example>
  </tag>
  <tag>
    <name>treefile</name>
     <type>util</type>
    <extends>url</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.TreeFileTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
          This tag does the same as TreeIncludeTag, but instead of including the
          page that was found, it returns the URL for that page.
    </info>
    <attribute>
      <name>objectlist</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
                 The list of objects
        </info>
    </attribute>
    <see tag="param" />
    <see tag="url" />
    <see tag="treeinclude" />
    <see tag="leafinclude" />
    <example>See the example for tag 'leafinclude'.</example>
  </tag>
  <tag>
    <name>leaffile</name>
    <type>util</type>
    <extends>url</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.LeafFileTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
          This tag does the same as LeafIncludeTag, but instead of including the
          page that was found, it returns the URL for that page. This URL can be
          displayed using the 'write' tag.
    </info>
    <attribute>
      <name>objectlist</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
                 The list of objects
        </info>
    </attribute>
    <see tag="param" />
    <see tag="url" />
    <see tag="leafinclude" />
    <example>See the example for tag 'leafinclude'.</example>
  </tag>
  <tag>
    <name>treeinclude</name>
    <type>util</type>
    <extends>include</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.TreeIncludeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
      <p>
        This tag is an implementation of the 'TREEPART' scan command.
        There are two parameters: 'objectlist' and 'page'. The
        objectlist is a ',' separated list of objects, the 'page'
        is the page to be included. (inherited from the extended 'URL' tag)
          </p>
      <p>
        This tag is similar in behavior as the 'include' tag, but it
        will try several different paths to find a 'best matching'
        file to include. An example:
          </p>
      <p>
        objectlist="1,2,3,4", page="doh.jsp"
        The treeinclude tag will first try to include '/1/2/3/4/doh.jsp', if
                that file is not available, it will try '/1/2/3/doh.jsp', etc. etc.
        Besides the directory '/1/2/3/4', all directories starting with
        the object number will match. This means that the following paths
        will all work with the given parameters:
        <ul>
          <li>/1blaat/2random/3tekst/4kiekeboe/doh.jsp</li>
          <li>/1/2/3/4ditiseentest/doh.jsp</li>
          <li>/1/2/3/4alfabeta/doh.jsp</li>
        </ul>
        In case there are multiple paths that match for a given level
        (compare the last two entries of the list above), the one that
        comes alphabetically first will be chosen.
        This behavior is specified in the 'getSmartPath()' method in
        MMObjectBuilder.
          </p>
      <p>
        The naming schema mentioned above (number postfixed with a random
        string) can be overridden by a builder. For instance, if object
        with number 1 is actually a 'portal' object, and the 'portal' builder
        defines the 'getSmartPath' method, the following files (in order of importance,
        as soon as one of the files exists this one will be taken) will be
        included:
        <ul>
          <li>/myportal/2random/3tekst/4kiekeboe/doh.jsp</li>
          <li>/myportal/2/3/4ditiseentest/doh.jsp</li>
          <li>/myportal/2/3/4alfabeta/doh.jsp</li>
        </ul>
      </p>
    </info>
    <attribute>
      <name>objectlist</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
                 The list of objects
        </info>
    </attribute>
    <see tag="include" />
    <see tag="treefile" />
    <see tag="leafinclude" />
    <see tag="param" />
    <see tag="url" />
    <example>See the example for tag 'leafinclude'.</example>
  </tag>
  <tag>
    <name>leafinclude</name>
    <type>util</type>
    <extends>include</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.LeafIncludeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
      This tag does almost exactly the same as TreeInclude.
      The only difference is when Treeinclude cannot find a file to include. In that case,
      Leafinclude will use the type of the nodes from the objectlist to find a file to include.
    </info>
    <attribute>
      <name>objectlist</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
                 The list of objects
        </info>
    </attribute>
    <see tag="include" />
    <see tag="leaffile" />
    <see tag="param" />
    <see tag="url" />
    <example>
Object with id '100' is an object from builder 'portals'
Object with id '101' is an object from builder 'subsites'.

When leafinclude is called with page='page.jsp' and objectlist='101,102',
the following files will be tried to be included, in order of priority:
100/101/page.jsp
100/subsites/page.jsp
portals/subsites/page.jsp.
The default behavior of getSmartPath is that the directory '100' is chosen
for objectid '100'.
Of course, the default behavior of getSmartPath can still be overridden.
    </example>
  </tag>
  <tag>
    <name>param</name>
    <type>util</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.ParamTag</tagclass>
    <info>
    Adds a parameter to the parent URL Tag.
    </info>
    <see tag="url" />
    <see tag="include" />
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
    The name of the parameter.
    </info>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
    The value of the parameter. Is this attribute is missing, then the body of the param tag is used.
    </info>
    </attribute>
    <example>See the example for tag 'url'.</example>
  </tag>
  <tag>
    <name>formatter</name>
    <type>util</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.FormatterTag</tagclass>
    <info>
      This tag performs XSL and other transformations.
    </info>
    <attribute>
      <name>xslt</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Path to the XSLT file which must, relative to the current JSP
        file. If you want to use default MMBase XSLT's, then you can
        prefix by 'mm:', and searching will begin in the mmbase
        configuration directory.
      </info>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        <p>
          A few transformations are predefined in MMBase. If they are
          XSL transformations then you can put your extensions in e.g.
          xslt/2xhtml.xslt. This xslt can be extended from the 'basic'
          xslt by beginning it with: &lt;xsl:import
          href="mm:2xhtml.xslt" /&gt;.
        </p>
        <p>
          So basicly, when you do specify the format attribute there
          can happen two different things:
          <ul>
            <li>
              It is a shortcut for certain values for the 'xslt'
              attribute.  E.g. format="xhtml" is shorthand for
              xslt="xstl/2xhtml.xslt'.
            </li>
            <li>
              It give access to certain java functionality present in
              the formatter tag's implementation. It is e.g. senseless
              to escape XML with a XSL style sheet, when it can be done
              so easily in Java.
            </li>
          </ul>
        </p>
      </info>
      <possiblevalue>
        <value>xhtml</value>
        <info>An XSLT. Transforms nodes or fields to an XHTML presentation.</info>
      </possiblevalue>
      <possiblevalue>
        <value>rich</value>
        <info>An XSLT. Transforms mmxf fields to simple text only presentation.</info>
      </possiblevalue>
      <possiblevalue>
        <value>presentxml</value>
        <info>An XSLT. Tries to make a nice presentation of XML in XHTML, with colors and so on.</info>
      </possiblevalue>
      <possiblevalue>
        <value>code</value>
        <info>An XSLT. Doesn't work well. To present taglib code.</info>
      </possiblevalue>
      <possiblevalue>
        <value>escapexml</value>
        <info>Escapes characters which make something XML. This way you can easily present XML in XHTML pages</info>
      </possiblevalue>
      <possiblevalue>
        <value>escapexmlpretty</value>
        <info>Similar to escapexml, but the XML is nicely formatted for human consumption first. This required the XML to be valid, otherwise you get an exception.</info>
      </possiblevalue>
      <!-- THERE IS A TIME TAG TO DO THESE KIND OF THINGS
      <possiblevalue>
      <value>date</value>
      <info>
          Take a date-time field and formats it like a real date and/or
          time. Use the options attribute to specify how this must be
          done exactly. It is an argument for
          java.text.SimpleDateFormat.applyPattern.
    </info>
      </possiblevalue>
      -->
    </attribute>
    <attribute>
      <name>options</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        You can give options to the transformation.
      </info>
    </attribute>
    <attribute>
      <name>wants</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        <p>
          This tags can communicate in two ways with its body. Normally
          the default way will do what you expect, but occasionally it
          can be that it doesn't. then this attribute will come in
          handy.
        </p>
        <p>
          If you don't understand this attribute, then don't
          worry. You will when you need it.
        </p>
      </info>
      <possiblevalue>
        <value>string</value>
        <info>Means that the tag simply takes its body as a string.</info>
      </possiblevalue>
      <possiblevalue>
        <value>DOM</value>
        <info>
          Means that the tag must contains sub-tags, which can
          communicate themselves to this formatter tag and are put in
          a DOM Document (created by org.mmbase.bridge.xml.Generator)
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>default</value>
        <info>
          <p>
            This is the default, and means that the way in which the
            formatter tag get its information is determined smartly.
          </p>
          <p>
            This means that it is 'DOM' iff the body contains only tags
            which can communicate themselves to this tag, or don't
            produce output themselves (are not writer tags) and the
            'format' is an XSLT-format.
          </p>
        </info>
      </possiblevalue>
    </attribute>
    <extends>contextreferrer</extends>
    <extends>writer</extends>
    <see tag="xslt" />
  </tag>
  <tag>
    <name>xslt</name>
    <type>util</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.XsltTag</tagclass>
    <info>
      This tag must live as a sub-tag of Formatter. You can add 'inline' XSL with this. (EXPERIMENTAL)
    </info>
    <extends>contextreader</extends>
    <see tag="formatter" />
    <example>
      <include base="examples.taglib" href="codesamples/xsltinline.jsp" />
    </example>
  </tag>
  <tag>
    <name>time</name>
    <type>util</type>
    <extends>writer</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.TimeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.StringWriterTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
        The time taglib can be used for all kind of manipulations regarding to times.</info>
    <see tag="locale" />
    <attribute>
      <name>time</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The time attribute specifies the time to be used, this can be
        done in multiple ways, in order of preference: 1) If the
        'inputformat' attribute is used, this is used to parse the
        content of the 'time' attribute, one can define 'human
        readable format' like this. 2) Specify the time in seconds
        from EPOC (this is the way how MMBase handles times). 3) By
        using keywords, such as: yesterday, tomorrow, today, now.
      </info>
    </attribute>
    <attribute>
      <name>inputformat</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The inputformat attribute cat be used to specify how the time
        attribute should be parsed. The comprehensive syntax for this
        attribute can be found at
        http://java.sun.com/j2se/1.3/docs/api/java/text/SimpleDateFormat.html. Notice
        that if times have the following form they will be parsed
        automatically, and this attribute can be omitted: yyyy/mm/dd
        hh:mm:ss, yyyy/mm/dd, and hh:mm:ss.
      </info>
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The offset attribute can be used to change the time specified
        with the time attribute. The offset is expressed in seconds.
      </info>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The format attribute specifies how to display the time. If the
        format attribute is not used the time will be displayed in
        seconds from EPOC. The syntax of the format attribute is
        identical to the syntax of the inputformat attribute. Instead
        of using the format attribute you can also use the MMBase
        formatter taglib.
      </info>
    </attribute>
    <example>
      &lt;mm:time format="yyyy/MM/dd" /&gt; generates 2002/04/21
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/timelocale.jsp" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/timetime.jsp" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/timeoffset.jsp" />
    </example>
    <example>
      <include base="examples.taglib" href="codesamples/timeenv.jsp" />
    </example>
  </tag>
  <tag>
    <name>log</name>
    <type>util</type>
    <tagclass>org.mmbase.bridge.jsp.taglib.debug.LogTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.debug.LogTEI</teiclass>
    <info>
      Logs the body or creates a Logger variable in it.  You can log
      to the MMBase log with this.  It logs its body on 'service'
      within the category 'org.mmbase.PAGE.LOGTAG', followed by the file name
      of the JSP which is executed.
    </info>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        If this attribute is present, the body will not be logged, but
        in the body this jspvar is available, which is of the type
        'Logger'. This can be handy if your page contains a lot of
        Java code.
      </info>
    </attribute>
    <example>
&lt;mm:log&gt;Log this to the log file&lt;/mm:log&gt;
Generates something like this in the mmbase log file:
19:16:04,030 SERVICE - 0: Log this to the log file
The 0 is just counter, which starts at 0 on every page.
    </example>
  </tag>
  <tag>
    <name>locale</name>
    <see tag="cloud" />
    <see tag="time" />
    <tagclass>org.mmbase.bridge.jsp.taglib.LocaleTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.LocaleTEI</teiclass>
    <info>
      <p>
        Sets a locale. Tags living in its body can request the Locale
        from it, if they need it. A `locale' is more or less like a
        `language', but it is a little more. E.g. when formatting a
        date it is needed to know what the conventions are for the
        order of the fields, and what kind of characters to use to
        separate them. Another example is the formatting of numbers,
        which is also ruled by 'locale' conventions.
      </p>
      <p>
        See <a href="http://java.sun.com/j2se/1.4/docs/api/java/util/Locale.html">JavaDoc
        for Locale class</a> (A little technical, but at least you'll
        find links to possible languages and countries, and another
        short description of what a Locale actually is).
      </p>
    </info>
    <attribute>
      <name>language</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A two letter language code according to ISO 639.
      </info>
      <examplevalue>
        <value>nl</value>
      </examplevalue>
      <examplevalue>
        <value>en</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>country</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A two letter country code according to ISO 3166.
      </info>
      <examplevalue>
        <value>BE</value>
      </examplevalue>
      <examplevalue>
        <value>GB</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        A jspvar of type Locale can be created.
      </info>
    </attribute>
    <example>
      <include base="examples.taglib" href="codesamples/timelocale.jsp" />
    </example>
  </tag>
  <tag>
    <name>content</name>
    <see tag="cloud" />
    <see tag="time" />
    <tagclass>org.mmbase.bridge.jsp.taglib.ContentTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.LocaleTEI</teiclass>
    <info>
    </info>
    <attribute>
      <name>language</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>country</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
      </info>
    </attribute>
    <attribute>
      <name>encoding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
      </info>
    </attribute>
    <example>
      <include base="examples.taglib" href="codesamples/timelocale.jsp" />
    </example>
  </tag>
</taglib>
