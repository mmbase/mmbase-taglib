<!--
This "enhanced" tld file will be converted to a "normal" tld and a html file.

To convert this file to a standard .tld file you need  an xslt engine like xalan:
java org.apache.xalan.xslt.Process -Q -IN mmbase-taglib.xml -XSL xml2tld.xslt  > mmbase-taglib.tld

To convert this file to html documentation you need  an xslt engine:
java org.apache.xalan.xslt.Process -Q -IN mmbase-taglib.xml -XSL xml2html.xslt


The following additional tags are possible between <tag> and </tag>:

  <info>...</info>

  <example>...</example>

  <extends>...</extends>


The following additional tags are possible between <attribute> and </attribute>:

  <requirednote></requirednote> (To note that requirement of this attribute
                                 is dependant on other conditions.)

  <info>...</info>

  <possiblevalue> (Use one or more to list a possible values)
    <value>...</value>
    <info>...</info>
  </possiblevalue>

  <examplevalue> (Use one ore more to give some example values)
    <value>...</value>
    <info>...</info>
  </examplevalue>

Use one or more possiblevalue tags if you want to list all possible values. Use
one or more examplevalue tags is you want to give some example values.
-->
<taglib>
  <tlibversion>1.0.1</tlibversion>
  <jspversion>1.1</jspversion>
  <shortname>mmbase</shortname>
  <uri>http://www.mmbase.org/mmbase-taglib-1.0</uri>
  <info>
    <p>
      MMBase consists of a cloud of nodes (also known as objects) wich can be related to each
      other. Relations can be seen as nodes with two arms which they use to connect two other
      nodes. Nodes of a specific type (like a person node who holds a person's data) have their own
      nodemanager (also knows as a builder). A node manager can have functions wich are specific for
      the type of nodes it is managing. Just like a cloud can contain different type of nodes it can
      contain different type of relations. And just like specific type of nodes have their own
      nodemanager, relations of a specific type have their own relation manager.
    </p>
    <p>
      This relativily simple idea gives rises to rich and sometimes complicated data structures. The
      goal of the MMBase taglib is to make this 'cloud' of data easily accessible, by means of
      XML-like 'tags'. There are tags for 'nodes' and for 'fields' (which are in nodes). There are
      also tags for lists and list of nodes.  Additionally there are also tags available, which do
      not directly relate to the MMBase data cloud, but are simply handy sometimes.
    </p>
    <p>
      Tags can exchange variables by use of a 'context', and 'variables' in it. Please read the <a
      href="#context">documenation for mm:context</a> if you want to know how this works.
    </p>
    <p>
      Tags can be divided in groups of tags which share common properties and functionailty.  These
      groups are described first. 
    </p>
  </info>
  <taginterface>
    <name>contextreferrer</name>
    <info>
      Contextreferrer tags refer to the context. This means that (most of) their attributes can
      contain `context' variables. All tags are contextreferrers or specialisations of it.
    </info>
    <attribute>
      <name>context</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	If you want to get it from another context than the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>contextwriter</name>
    <extends>contextreferrer</extends>
    <info>
      A contextwriter is a contextreferrer, but it can also write itself to the context (using the
      id attibute).
    </info>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	With the `id' attribute you define an unique identifier for this context referrer. Nested tags
	can refer to this directly and other tags by means of a context.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>contextreader</name>
    <extends>contextwriter</extends>

    <info>
      A contextreader is a contextwriter, but besides writing itself to the context, it can also
      read itself back from the context.
    </info>
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	Reuses a previously defined tag of the same type.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>listreferrer</name>
    <info>
      A listreferrer tag has to live in the body of list tags.
    </info>
    <attribute>
      <name>list</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	Which list to use, if the tag is in the body of more than one list, and you don't need the
	direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>listprovider</name>
    <info>
      A list provider has a body which is evaluated repeatedly.  If a list is a  contextwriter,
      then in the body of the list a list item is in the context, and afterwards a 'List', which can
      normally be reused with the 'referid' of some list.
    </info>
    <see>listreferrer</see>
  </taginterface>
  <taginterface>
    <name>condition</name>
    <info>
      Condition tags have a body which is evaluated or not depending on certain attributes or on the
      surrounding tags.
    </info>
    <attribute>
      <name>inverse</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Turns the condition around, such that precisely the inverse will happen. This attribute is
        of course false on default. You can set it to true.
      </info>
      <possiblevalue><value>true</value></possiblevalue>
      <possiblevalue><value>false</value></possiblevalue>
    </attribute>
  </taginterface>
  <taginterface>     
    <name>nodeprovider</name>
    <info>
      A node provider makes an MMBase Node available to its body.
    </info>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        A jspvar of type Node can be created.
      </info>
    </attribute>
  </taginterface>
  <taginterface>     
    <name>clusternodeprovider</name>
    <extends>nodeprovider</extends>
    <info>
      A clusternode provider makes an MMBase Cluster Node available to its
      body. A cluster nodes is in fact a combination of nodes. You can
      get a real node with a sub node tag with the 'element'
      attribute.
    </info>
    <see>node.element</see>
  </taginterface>
  <taginterface>     
    <name>fieldreferrer</name>
    <info>
      A tag that can live in the body of a fieldprovider tag. 
    </info>
    <attribute>
      <name>field</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	If the tag is living in more than one fieldprovider, and you don't need the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>     
    <name>nodereferrer</name>
    <info>
      A nodereferrer tag is a tag that can (needs to) live in the body of a node
      provider, and uses the node provided by the node provider tag.
    </info>
    <!-- in reality noderefferer extends cloudreffer, but only few tags use that -->
    <attribute>
      <name>node</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Which node to use. You can use this attribute if your Nodereferrer is living in more than
        one NodeProvider, and you don't need the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>     
    <name>cloudreferrer</name>
    <info>
      A cloud referrer tag is a tag that needs to live in the body of a cloud tag. This means that
      it can use MMBase data.
    </info>
    <attribute>
      <name>cloud</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	Which cloud to use. If the tag is living in more than one cloud tag, and you want to refer
	to another then the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>     
    <name>writerreferrer</name>
    <info>
      A writerreferrer tag can live in the body of a writer tag, and use the supplied information.
    </info>
    <see>writer</see>
    <attribute>
      <name>writer</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	Which writer to use. If the tag is living in more than one writer, and you want to refer
	to another then the direct parent.
      </info>
    </attribute>
  </taginterface>
  <taginterface>
    <name>writer</name>
    <info>
      A writer is a tag that can produce output. Normally the default will be to
      write to the page, unless the tag has a body.
    </info> 
    <see>write</see>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        The name of the variable to be created. Normally, but not always, the
        scope of this variable is the body of the tag. This attribute can never
        contain context variables.
      </info>
    </attribute>
    <attribute>
      <name>vartype</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        The type of the variable to be created. Usually there is a reasonable
        default for this attribute. This attribute can never contain context
        variables.
      </info>
      <possiblevalue><value>Object</value>  <info>java.lang.Object</info></possiblevalue>
      <possiblevalue><value>String</value>  <info>java.lang.String</info></possiblevalue>
      <possiblevalue><value>Node</value>    <info>org.mmbase.bridge.Node</info></possiblevalue>
      <possiblevalue><value>Cloud</value>    <info>org.mmbase.bridge.Cloud</info></possiblevalue>
      <possiblevalue><value>Transaction</value>    <info>org.mmbase.bridge.Transaction</info></possiblevalue>
      <possiblevalue><value>decimal</value> <info>java.math.BigDecimal</info></possiblevalue>
      <possiblevalue><value>Integer</value> <info>java.lang.Integer</info></possiblevalue>
      <possiblevalue><value>Vector</value>  <info>java.util.Vector. It's better to use List, normally.</info></possiblevalue>
      <possiblevalue><value>List</value>    <info>java.util.List</info></possiblevalue>
      <possiblevalue><value>Long</value>    <info>java.lang.Long</info></possiblevalue>
      <possiblevalue><value>Double</value>  <info>java.lang.Double</info></possiblevalue>
      <possiblevalue><value>Float</value>   <info>java.lang.Float</info></possiblevalue>
    </attribute>
    <attribute>
      <name>write</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>Whether to write to the page or not. Normally the default value will suffice.</info>
      <possiblevalue><value>true</value></possiblevalue>
      <possiblevalue><value>false</value></possiblevalue>
    </attribute>
  </taginterface>
  <tag>
    <name>list</name>
    <extends>clusternodeprovider</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <extends>cloudreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      Returns a list of nodes. Starting at one or more nodes traversals are made according to a
      specified path of nodemanagers. One traversal makes up one record returned by the list. All
      possible traversals that can be made starting at one or more nodes of the same type and
      following a specified path are returned. Additional attributes can be used to exclude records
      from the returned list or to influence the order of the returned list.  Because the returned
      records can contain more than one node you will have to prefix the field name with the
      nodemanager name and a dot if you want to refer to them. When using a jsp variable a
      underscore has to be used to separate a nodemanager name from a field name.
    </info>
    <see>listnodes</see>
    <see>node.element</see>
    <attribute>
      <name>nodes</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Comma-separated list of node numbers that should be used as start nodes. The start nodes don't
        have to be a member of the first nodemanager in the path. For example, if the start nodes
        belong to the second nodemanager in a path with a length of three nodemanagers, traversals
        will go into two directions at the same time. All traversals that make up a complete path
        are returned.  If a node belongs to the last nodemanager in a path traversals will go from
        right to left starting at the last nodemanager.  All start nodes specified in this attribute
        have to belong to the same nodemanager. Nodes that belong to a different nodemanager than
        the first node are ignored In case this attribute is not specified all nodes from the first
        nodemanager in the path are used as start nodes.
      </info>
    </attribute>
    <attribute>
      <name>path</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A comma-seperated list of nodemanagers which specifies the path
        that should be followed. It is possible to explicitly specify a
        relationmanager that should be used to go from one node to an other. If
        no relationmanager is specified between two nodemanagers, all possible
        relationmanagers that can be used to go to the next specified node in
        the path are followed. It is possible to add a digit (0-9) to the
        nodemanager name and refer to this nodemanager with his name and this
        digit appended. This can be usefull if a nodemanager is used more than
        once in a path.
      </info>
      <examplevalue>
        <value>mags</value>
      </examplevalue>
      <examplevalue>
        <value>mags,news</value>
      </examplevalue>
      <examplevalue>
        <value>mags,related,news</value>
      </examplevalue>
      <examplevalue>
        <value>mags,news,images</value>
      </examplevalue>
      <examplevalue>
        <value>mags,related,news,related,images</value>
      </examplevalue>
      <examplevalue>
        <value>pools,pools0,urls</value>
      </examplevalue>
      <examplevalue>
        <value>pools1,pools2,urls,pools3</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>fields</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Comma-separated list of fields that should be made available in the
        page. The fields are selected from attributes of the corresponding node
        managers defined in type. It is required to append a prefix to
        each field listed e.g. fields=&quot;mags.title,news.title&quot;.
      </info>
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    <info>
      Contraints to prevent records from being included in the returned list.
      These constraints follow the syntax of the SQL where clause. It's a good
      practice to use uppercase letters for the operators and lowercase letters
      for the fieldnames.
    </info>
    <examplevalue>
      <value>url.number = 100</value>
      <info>!=, &lt;, &gt;, &lt;= and &gt;= can also be used</info>
    </examplevalue>
    <examplevalue>
      <value>person.name = 'admin'</value>
    </examplevalue>
    <examplevalue>
      <value>person.email IS NULL</value>
      <info>indicating the email field should be empty</info>
    </examplevalue>
    <examplevalue>
      <value>person.email LIKE '%.org'</value>
      <info>indication the email should end with .org</info>
    </examplevalue>
    <examplevalue>
      <value>url.number BETWEEN 30 AND 50</value>
    </examplevalue>
    <examplevalue>
      <value>person.name IN ('admin', 'anonymous')</value>
    </examplevalue>
    <examplevalue>
      <value>NOT (url.number = 100)</value>
    </examplevalue>
    <examplevalue>
      <value>person.email IS NOT NULL</value>
      <info>indicating the email field should not be empty</info>
    </examplevalue>
    <examplevalue>
      <value>person.email NOT LIKE '%.org'</value>
      <info>indication the email should not end with .org</info>
    </examplevalue>
    <examplevalue>
      <value>url.number NOT BETWEEN 30 AND 50</value>
    </examplevalue>
    <examplevalue>
      <value>person.name NOT IN ('admin', 'anonymous')</value>
    </examplevalue>
    <examplevalue>
      <value>LOWER(user.name) = 'admin'</value>
      <info>this will also allow `Admin' to be returned</info>
    </examplevalue>
    <examplevalue>
      <value>LENGTH(user.name) > 5</value>
      <info>
        this will only allow name with a length greater than 5 to be
        returned
      </info>
    </examplevalue>
    <examplevalue>
      <value>((number=100) OR (name='admin') AND email LIKE '%.org')</value>
      <info>Linking constraints together using AND and OR</info>
    </examplevalue>
    <examplevalue>
      <value>name='aaa''bbb'</value>
      <info>
        To only retrieve the string aaa'bbb. A single quote can be escaped using
        it twice for every single occurence.
      </info>
    </examplevalue>
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A comma-separated list of field names on which the returned list should
        be sorted.
      </info>
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        A comma-separated list of values indicating wether to sort up
        (ascending) or down (descending) on the corresponding field in the
        orderby  parameter or null if sorting on all fields should be up. The
        value DOWN (case insensitive) indicates that sorting on the
        corresponding field should be down, all other values (including the
        empty value) indicate that sorting on the corresponding field should be
        up. If the number of values found in this parameter are less than the
        number of fields in the orderby parameter, all fields that don't have a
        corresponding direction value are sorted according to the last specified
        direction value.
      </info>
      <possiblevalue>
        <value>UP</value>
      </possiblevalue>
      <possiblevalue>
        <value>DOWN</value>
      </possiblevalue>
      <possiblevalue>
        <value>UP,DOWN,UP</value>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>distinct</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        If set to `true' or `yes' all records who have exactly the same values
        will not be added a second time to the returned list.
      </info>
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The maximum number of records to return.</info>
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The first number of records to skip.</info>
    </attribute>
    <attribute>
      <name>searchdir</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Determines how directionality affects the search. If set to
        &quot;destination&quot; relations in a path will only be followed
        if valid relation exist from source to destination. If set to
        &quot;source&quot; relations in a path will only be followed if
        valid relations exist from destination to source. To follow all
        relations ignoring their directionality set this attribute to
        &quot;all&quot;. Any other value for this attribute will follow
        relations the way they are defined (either source to destination,
        destination to source or both).
      </info>
    </attribute>

<example>&lt;mm:list nodes="123" path="mags,news" fields="mags.title,news.number"&gt;
  &lt;mm:first&gt;magazine list&lt;/mm:first&gt;
  &lt;mm:field name="mags.title" /&gt;
&lt;/mm:list&gt;</example>

<example>&lt;mm:list nodes="123" path="mags,posrel,news" orderby="posrel.pos" fields="news.title"&gt;
  &lt;mm:first&gt;news in this magazine, ordered&lt;/mm:first&gt;
  &lt;mm:field name="news.title" /&gt;
&lt;/mm:list&gt;</example>

<example>&lt;mm:list path="pools,pools0,urls" fields="pools.name,pools0.name,urls.url"&gt;
  &lt;mm:field name="pools.name" /&gt;
  &lt;mm:field name="pools0.name" /&gt;
  &lt;mm:field name="urls.url" /&gt;
&lt;/mm:list&gt;</example>

  </tag>
  <tag>
    <name>related</name>
    <extends>clusternodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.RelatedTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      The related tag is the same as the list tag except that it always needs
      one or more start nodes from which the nodemanager will be taken
      and prefixed to the path specified bij the path attribute.
      By default, the node used is that of the parent node tag.
    </info>
    <see>list</see>
    <see>relatednodes</see>
    <see>node.element</see>
    <attribute>
      <name>node</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The node attribute overrides the default node for a related tag,
        using instead the node tag referenced by the attribute.
      </info>
    </attribute>
    <attribute>
      <name>nodes</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Comma separated list of node numbers that should be used instead of the
        default node.
      </info>
    </attribute>
    <attribute>
      <name>path</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        This attribute is the same as the path attribute of the list tag except
        that the first nodemanager should be ommitted. The first nodemanager
        is implied by the parent node and prefixed to the path automaticly.
      </info>
    </attribute>
    <attribute>
      <name>fields</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>distinct</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>searchdir</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>

<example>&lt;mm:node number="123"&gt;
  &lt;mm:related  path="mags,news" fields="mags.title,news.number"&gt;
    &lt;mm:first&gt;magazine list&lt;/mm:first&gt;
    &lt;mm:field name="mags.title" /&gt;
  &lt;/mm:related&gt;
&lt;/mm:node&gt;</example>

<example>&lt;mm:node number="456"&gt; &lt;!-- node 456 is of type mags --&gt;
  &lt;mm:field name="title" /&gt;
  &lt;mm:related path="news0" fields="mags0.title"&gt;
    &lt;mm:first&gt;related magazines&lt;/mm:first&gt;
    &lt;mm:field name="mags0.title" /&gt;
  &lt;/mm:related&gt;
&lt;/mm:node&gt;</example>

  </tag>
  <tag>
    <name>listnodes</name>
    <extends>cloudreferrer</extends>
    <extends>nodeprovider</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListNodesTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      The listnodes tag can be used to retrieve nodes managed by a certain
      nodemanager. The syntax of the attributes are the same as the syntax of
      the attributes of the list tag except that it is not needed to prefix
      the fieldnames with nodemanager names.
    </info>
    <see>list</see>
    <see>relatednodes</see>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
        The name of the nodemanager managing the type of nodes that should be
        listed.
      </info>
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
    </attribute>

<example>&lt;mm:listnodes type="mags"  &gt;
  &lt;mm:first&gt;magazine list&lt;/mm:first&gt;
  &lt;mm:field name="title" /&gt;
&lt;/mm:listnodes&gt;</example>

  </tag>
  <tag>
    <name>relatednodes</name>
    <extends>nodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.RelatedNodesTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
      The relatednodes tag can be used to retrieve nodes of a certain type
      related to a node of another type. The syntax of the attributes are the
      same as the syntax of the attributes of the list tag except that it is
      not needed to prefix the fieldnames with a nodemanager name.
      By default, the node used is that of the parent node tag.
    </info>
    <see>list</see>
    <see>listnodes</see>
    <see>related</see>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <requirednote>
        You cannot use 'orderby' or 'constraints' if you do not use 'type'.
      </requirednote>
    </attribute>
    <attribute>
      <name>constraints</name>
      <required>false</required>
      <requirednote>
        You also need to supply 'type'.
      </requirednote>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>orderby</name>
      <required>false</required>
      <requirednote>
        You also need to supply 'type'.
      </requirednote>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>directions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>max</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
<example>&lt;mm:node number="Magazine" &gt;
&lt;mm:relatednodes type="news" &gt;
  &lt;mm:first&gt;news in this magazine&lt;/mm:first&gt;
  &lt;mm:field name="title" /&gt;
&lt;/mm:relatednodes&gt;</example>
  </tag>
  <tag>
    <name>even</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListEvenTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is an even item</info>
  </tag>
  <tag>
    <name>odd</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListOddTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is an odd item</info>
  </tag>
  <tag>
    <name>changed</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListChangedTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this item has changed compared to the previous one.
     The criteria applies to the field(s) given in the orderby attribute of the accompanying list.
     The first item of a list is always concidered 'changed'.
     </info>
  </tag>

  <tag>
    <name>first</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListFirstTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is the
    fist item in the list.</info>
  </tag>
  <tag>
    <name>last</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.macro.ListLastTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Can be used in a list to determine if this is the
    last item in the list.</info>
  </tag>
  <tag>
    <name>cloud</name>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.CloudTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.CloudTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>The cloud tag initializes the cloud to use.</info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The name of the cloud. On default it is 'mmbase'.</info>
      <examplevalue>
        <value>mmbase</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>logon</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The authentication name to use (account). When used together with
      e.g. the method="http" option, validation only succeeds if
      the username equals logon. In this case it is also possible to
      supply a list of usernames here (comma seperated)</info>
    </attribute>
    <attribute>
      <name>rank</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The required rank. This is another way to force a special
      user when using method="http". 
      </info>
      <possiblevalue>
        <value>administrator</value>
      </possiblevalue>
      <possiblevalue>
        <value>basic user</value>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>pwd</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>The password to use to logon to the cloud.</info>
    </attribute>   
    <attribute>
      <name>method</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Describes how to get the authentication information.
      </info>
      <possiblevalue>
        <value>http</value>
        <info>
          Use http protocol to ask name and password
          from the user. If the `logon' attribute is specified too, then
          logging on will fail if the user does not use that
          username. The `pwd' attribute will be ignored.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>logout</value>
        <info>
          When using `http' to logon, the browser will store name and
          password. If you want to logon again, you have to `logout' first.
          In this case the `realm' of the http authenication will be
          changed, and you obtain a new possibility to logon after
          that. The cloud you obtain is anonymous.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>anonymous</value>
        <info>
          Ignore the `logon' attribute and create (or
          reuse) a cloud with an anonymous user.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>asis</value>
        <info>
          Ignore the `logon' attribute and reuse the cloud as
          it is in the session.
        </info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>sessionname</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The name the cloud must get in the session. Using this it is
        possible to avoid retyping your password when
        switching between two sites which both use http
        authentication.
      </info>
    </attribute>
    <attribute>
      <name>authenticate</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The authentitation module which must be used by the security
        system. The default is "name/password", which will do in most
        cases.
      </info>
    </attribute>
    <attribute>
      <name>uri</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
       The uri in case the cloud has to be retrieved using the RMMCI.
      </info>
      <possiblevalue>
         <value>local</value>
         <info>    
		    Get a local cloud
         </info>
      </possiblevalue>
	  <possiblevalue>
        <value>rmi://...</value>
		<info>
		  RMMCI cloud.
		</info>
	  </possiblevalue>
	  <examplevalue>
		<value>rmi://www.mmbase.org/remotecontext</value>
	  </examplevalue>
    </attribute>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
       The name of the Jsp variable to export by cloud. 
      </info>
    </attribute>

    <example>
&lt;!-- Show titles of all news articles from user kamer (which are in pool kamer_pool)
only to user kamer --&gt;
&lt;mm:cloud jspvar="cloud" logon="kamer" method="http"&gt;
logged on as: &lt;bean:write name="cloud" property="user.identifier" /&gt;&lt;br /&gt;
&lt;mm:node number="kamer_pool" id="my_node"&gt;
  &lt;mm:related paths="news" orderby="number" directions="DOWN"&gt;
     &lt;mm:first&gt;
        &lt;!-- show a small heading, in which also appears the node-number of the pool --&gt;
        &lt;mm:field node="my_node" name="number" /&gt;:
        &lt;mm:field name="number" /&gt;&lt;mm:fieldinfo type="guiname" /&gt;&lt;/mm:field&gt;:
        &lt;mm:field name="title" /&gt;&lt;mm:fieldinfo type="guiname" /&gt;&lt;/mm:field&gt;:
     &lt;/mm:first&gt;
     &lt;mm:field name="number" /&gt;: &lt;mm:field name="title" /&gt;&lt;br /&gt;
  &lt;/mm:related&gt;
&lt;/mm:node&gt;
&lt;/mm:list&gt;
&lt;/mm:cloud&gt;
    </example>
    <example>
&lt;!-- To logon on as a different user on my_page.jsp, make a ref to a page with this:  --&gt;
&lt;mm:cloud method="logout" /&gt;
&lt;% response.sendRedirect("http://my_host/my_page.jsp"); %&gt;
    </example>

  </tag>
  <tag>
    <name>info</name>
	<extends>writer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.InfoTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
	  This tag can be used to call getInfo from Module and
	  NodeManager. The result of 'getInfo' is a string which on
	  default is written to the page.
	</info>
    <attribute>
        <name>nodemanager</name>
        <required>false</required>
    <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
        <name>module</name>
        <required>false</required>
        <rtexprvalue>true</rtexprvalue>       
    </attribute>
    <attribute>
        <name>command</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
	    <info>The command which is given</info>
    </attribute>
  </tag>
  <tag>
    <name>node</name>
    <extends>nodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>cloudreferrer</extends>    
	<extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.NodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
      A tag to make a node available. Normally it will enclose some field tags, but it is also
      possible to only write to the context, or to a jsp variable.
    </info>
    <attribute>
      <name>number</name>
      <required>false</required>
      <requirednote>Either 'number', 'element' or 'referid' must be supplied.</requirednote>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
	The nodenumber or alias identifying this node in MMBase.
    </info>
    </attribute>
    <attribute>
      <name>notfound</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
     What to do if the node is not found. The default is to throw an exception.
    </info>
      <possiblevalue>
        <value>skip|skipbody</value>
        <info>Simply skip the body if the node is not found</info>
      </possiblevalue>
      <possiblevalue>
        <value>throw|throwexception</value>
        <info>Throw an exception if the node is not found</info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>element</name>
      <requirednote>Either 'number', 'element' or 'referid' must be supplied.</requirednote>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	The name of the node manager, identifying the node in a list or related list tag.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>field</name>
    <extends>writer</extends>
    <extends>fieldreferrer</extends>
    <extends>nodereferrer</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.FieldTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <info>
      Gets the field `name' from node `node' (can also be list).
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
	The name of the field to get.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>createalias</name>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CreateAliasTag</tagclass>
    <info>
      Lives in a NodeProvider. Creates the bodycontent as an alias for the node.
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	In stead of giving it in the body, you can also indicate it with this parameter.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>deletealias</name>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.DeleteAliasTag</tagclass>
    <info>
      Lives in a NodeProvider. Deletes the bodycontent as an alias for the node.
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	In stead of giving it in the body, you can also indicate it with this parameter.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>listcondition</name>
    <extends>condition</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListConditionTag</tagclass>
    <info>
      Must be used in the body of a list tag. And the body of itself will only be evaluated if some
      condition is true.
    </info>
    <see>first</see>
    <see>last</see>
    <see>changed</see>
    <see>even</see>
    <see>odd</see>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	The `value' of the condition, in other words what the condition is, described with a
	string. There is a limited set available now. They are also availabe as `macro'-tags on this
	tag.
      </info>
        <possiblevalue>
          <value>first</value>
          <info>
            Show only in first row.
          </info>
        </possiblevalue>
        <possiblevalue>
          <value>last</value>
          <info>
            Show only in last row.
          </info>
        </possiblevalue>
        <possiblevalue>
          <value>odd</value>
          <info>
            Show only when row number is odd.
          </info>
        </possiblevalue>
        <possiblevalue>
          <value>even</value>
          <info>
            Show only when row number is even.
          </info>
        </possiblevalue>
        <possiblevalue>
          <value>changed</value>
          <info>
            Show only when this row differs from the previous row (or when it is the first).
          </info>
        </possiblevalue>
    </attribute>
  </tag>
  <tag>
    <name>context</name>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ContextTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
      <p>
        'Contextwriter' tags inside a context tag supplying the `id'
      attribute register themselves in the context.  Other tags can
        refer to this id. See for example how the createrelation tag
        works. A special case of a another tag referring to this id is a
        tag of the same type. Normally with an attribute 'referid' you
        could 'repeat' the tag.
      </p>
      <p>
        With the import tag you can explicitily put things from outside
        this context into this context, e.g. from the parameter list or
        from a parent context. It is also possible to put new strings in
        the context with the import tag.
      </p>
      <p>
        There are several ways to refer to objects in the context.
      </p>
      <p>
        When you are adding a new object then the used attribute is
        `id'.
      </p>
      <p>
        The `id' of an `external' object like a request parameter
        is referred to as `externid' (only in the import tag).
      </p>
      <p>
        If you are reusing the same object, for example you have put
        a node in the context, and are using it again then an attribute
        `referid' is used.
      </p>
      <p>
        If some attribute wants to use the value of an object in the
        context, and it is an attribute which can refer to the context
        (which most attributes are), then you can use something like
        ${&lt;context-id;&gt;.&lt;object-id&gt;}. The 'context-id' is
        optional when you are in the same context, or sub-context. The
        value of a context variable can be written to the page with the
        `write' tag. The {}-parentheses are optional too.
      </p>
      <p>
        And finally there are some attributes which can only refer. For
        example if some tag has to live as a child of another tag but
        you want it to refer not to its direct parent, then there should
        be an attribute with the name of the parent in which you can put
        the id of the parent which it has to refer to. For example the
        field tag has an attribute `node'. This kind of referring does
        not function per the ContextTag, and is only good for finding
        ancestor tags. Other tags, like the createrelation tag have
        attributes like `source' and `destination' attributes which also
        simply contain the node id's. Please find the examples.
      </p>
      <p>
        In TCP there is a `tag' called `create', which is comparable to
        `context'.
      </p>
      <p>
        On default a context has no id. The implicit 'page' context
        also doesn't have. If a context has no id, there is no way of
        referring to variables of it if you are not in the context
        itself (or one of the subcontextes).
      </p>
    </info>
  </tag>
  <tag>
    <name>createrelation</name>
    <extends>nodeprovider</extends>
    <extends>cloudreferrer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CreateRelationTag</tagclass>
    <info>
      Creates a relation between two nodes.
    </info>
    <attribute>
        <name>role</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
    <refercontext>true</refercontext>
      <info>
    The role for the new relation.
        </info>
    </attribute>
    <attribute>
        <name>source</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
    <info>
         The id of the node which will be on the source side of the relation.
    </info>
    </attribute>
    <attribute>
        <name>destination</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
    <info>
         The id of the node which will be on the destination side of the relation.
    </info>
    </attribute>
    <example>
&lt;mm:cloud&gt;
&lt;mm:transaction id="my_transaction"&gt;
&lt;mm:createnode type="news" id="my_news"&gt;
   &lt;mm:setfield name="title"&gt;Todays news&lt;/mm:setfield&gt;
   &lt;mm:setfield name="subtitle"&gt;There happened a lot today&lt;/mm:setfield&gt;
&lt;/mm:createnode&gt;
&lt;mm:node number="1808" id="my_author" /&gt;
&lt;mm:createrelation role="author" source="my_author" destination="my_news" /&gt;
&lt;/mm:transaction&gt;
&lt;/mm:cloud&gt;
    </example>
  </tag>
  <tag>
    <name>createnode</name>
    <extends>nodeprovider</extends>
    <extends>contextwriter</extends>
    <extends>cloudreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CreateNodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
      Creates a new node.
    </info>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
	The type (NodeManager name) of the new node.
      </info>
      <examplevalue>
	<value>news</value>
      </examplevalue>
      <examplevalue>
	<value>people</value>
      </examplevalue>
    </attribute>
  </tag>
  <tag>
    <name>setfield</name>
    <extends>contextwriter</extends>
    <extends>fieldreferrer</extends>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.SetFieldTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.edit.SetFieldTEI</teiclass>
    <info>
      Changes the field `name' from node `node' (can also be list).
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	The name of the field to set. If this field is not set this tag will
	look for a surrounding fieldlist tag to retrieve name and node from.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>transaction</name>
    <extends>contextwriter</extends>
    <extends>cloudreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.TransactionTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.edit.TransactionTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
     The transaction tag creates a transaction. A transaction is
     a context too.
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The name of the transaction.</info>
      <examplevalue>
        <value>my_transaction</value>
      </examplevalue>
    </attribute>
    <attribute>
      <name>jspvar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
       The name of the Jsp variable to export. If not
       specified, then a variable with name `trans' will exist.
      </info>
    </attribute>

    <attribute>
      <name>commitonclose</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
       If the transaction must be committed after the body. The
       default is true.
      </info>
      <possiblevalue>
        <value>true</value>
      </possiblevalue>
      <possiblevalue>
        <value>false</value>
      </possiblevalue>
    </attribute>
  </tag>
  <tag>
    <name>cancel</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CancelTag</tagclass>
    <bodycontent>empty</bodycontent>
    <info>
      The cancel tag can be used to cancel a transaction.
    </info>
    <attribute>
      <name>transaction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The id of the transaction.</info>
    </attribute>
  </tag>
  <tag>
    <name>commit</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.CommitTag</tagclass>
    <bodycontent>empty</bodycontent>
    <info>
      The commit tag can be use to commit a transaction.
    </info>
    <attribute>
      <name>transaction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>The id of the transaction.</info>
    </attribute>
  </tag>
  <tag>
    <name>deletenode</name>
    <extends>node</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.edit.DeleteNodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
      This tag extends the `node' tag, and is precisely the same. The
      only difference is that after the body the node will be removed.
    </info>
    <attribute>
      <name>deleterelations</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <possiblevalue>
	<value>true</value>
      </possiblevalue>
      <possiblevalue>
	<value>false</value>
      </possiblevalue>
    </attribute>
  </tag>
  <tag>
    <name>fieldlist</name>
    <extends>listprovider</extends>
	<extends>contextreader</extends>
    <extends>cloudreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.FieldListTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
	  A list of fields. A fieldlist can be inside a NodeProvider in
	  which case the NodeManager is found by means of the parent
	  node. It can also be stand alone, then you have to supply the type
	  of the node (the name of the `nodemanager').
    </info>
    <attribute>
      <name>nodetype</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The type of fields that should be returned. If not specified, all
        fields are returned.
      </info>
      <possiblevalue>
        <value>create</value>
        <info>
          Defined in NodeManager from the bridge classes, but not used in
          BasicNodeManager. Currently it does nothing special.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>edit</value>
        <info>
          Return only those fields that should appear in the input area of the
          editor.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>list</value>
        <info>
          Return only those fields that should appear in the list area of the
          editor.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>search</value>
        <info>
          Return only those fields that should appear in the search area of the
          editor.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>all</value>
        <info>
          Return all fields.
        </info>
      </possiblevalue>
    </attribute>
  </tag>
  <tag>
    <name>fieldinfo</name>
    <extends>fieldreferrer</extends>
    <extends>contextwriter</extends>
    <extends>writer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.FieldInfoTag</tagclass>
	<see>field</see>
	<see>fieldlist</see>	
    <info>
	  <p>
		The fieldinfo tag can be used inside a FieldProvider. It's basic
		goal is to provide information about the field, though it
		sometimes can do a little more. It can for example in some case
		also <em>change</em> the field.
	  </p>
	  <p>
		If the parent fieldprovider is a fieldlist then this fieldlist
		does not always provide a node as well. In that case not every
		type of information is available.
	  </p>
    </info>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
	  <info>The type of information which must be returned</info>
      <possiblevalue>
        <value>name</value>
        <info>The name of the field</info>
      </possiblevalue>
      <possiblevalue>
        <value>guiname</value>
        <info>The GUI name of the field (can be in other language)</info>
      </possiblevalue>
      <possiblevalue>
        <value>input</value>
	<info>
	  A form entry for the field.  If the surrounding FieldList has an id, the names of the form
	  entries will be prefixed with it.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>useinput</value>
        <info>
	  <p>
	    If you have created a form with type="input" and this form was submitted, then you can
	    use type="useinput", and it will get the request/post parameter produced by "input" and
	    make the right changes to the parent field.
	  </p>
	  <p>
	    The necessary externid's for this will be implicity imported in the context. You don't
	    have to worry about them.
	  </p>
	  <p>
	    'useinput' is exceptional because it doesn't realy produce any 'info' about the field,
	    but rather changes it.
	  </p>
	  <p>
	    Can only be used if the parent FieldProvider also provides a Node.
	  </p>
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>searchinput</value>
        <info>
	  A form entry for the field, fit for use for searching. That means that no textareas will
	  be used and such.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>usesearchinput</value>
        <info>
	  If you have created a form with type="searchinput" and this form was submitted, then you
	  can use this. It will produce a part of a where clause which you can use to construct a
	  whole `where' for the list tag you are going to use.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>value</value>
        <info>
	  The value of this field. Can only be used if the parent FieldProvider also provides a
	  Node.
        </info>
      </possiblevalue>
      <possiblevalue>
        <value>guivalue</value>
        <info>
	  The guivalue of this field. Can only be used if the parent FieldProvider also provides a
	  Node.
        </info>
      </possiblevalue>
    </attribute>
  </tag>
  <tag>
    <name>nodeinfo</name>
    <extends>writer</extends>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.NodeInfoTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <info>
      The nodeinfo tag can be used inside a NodeProvider tag, to get certain information about the
      node.
    </info>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <possiblevalue>
        <value>type</value>
        <info>The type fo the node (the name of it's NodeManager).</info>
      </possiblevalue>
      <possiblevalue>
        <value>guitype</value>
        <info>The GUI representation of the type (NodeManager) of the node.</info>
      </possiblevalue>
    </attribute>
    <attribute>
      <name>nodetype</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
    </attribute>
    <example>&lt;mm:node number="1645"&gt;
Node of type &lt;mm:nodeinfo type="guitype" /&gt;&lt;br /&gt;
  &lt;mm:fieldlist type="edit"&gt;
    &lt;em&gt;&lt;mm:fieldinfo type="guiname" /&gt;&lt;/em&gt;:    &lt;mm:fieldinfo type="value" /&gt;&lt;br /&gt;
  &lt;/mm:fieldlist&gt;
&lt;/mm:node&gt;
</example>

  </tag>
  <tag>
    <name>present</name>
    <extends>condition</extends>
    <extends>contextreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.PresentTag</tagclass>
    <info>
      Checks if a certain variable is present in the parent Context tag.
    </info>
	<see>notpresent</see>
    <attribute>
      <name>referid</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
	Which context variable.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>notpresent</name>
    <extends>present</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.NotPresentTag</tagclass>
    <info>
      Checks if a certain variable is missing in the parent Context tag.
    </info>
    <see>present</see>
  </tag>
  <tag>
    <name>write</name>
    <extends>writer</extends>
    <extends>writerreferrer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.WriteTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.WriterTEI</teiclass>
    <info>
      <p>
        The write tag can be used to `export' context variables to something
        else. When you only specify what variable (with the `referid'
        or `value' attribute), then this tag writes to the page
        (therefore it is named `write'), unless it has a body, in
        which case the information is simply available to other tags
        in the body (like another write tag without attributes).
      </p>
      <p>
        This is the behavior of `writer' tags, and this tag is the
        most basic version of that. Being a `writer' tag it also
        supports the `jspvar' attribute with which you can make a jsp
        variable available in the body. 
      </p>
      <p>
        In addition to this basic `writer' functionality, the `write'
        tag itself can also write context variables to other storage
        locations, like the session and in cookies.
      </p>
    </info>
    <see>import</see>
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
	The key of the variable to get. If it is missing (and value is
	missing), then the parent Writer tag is written (if it exist).
      </info>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
	The value to write. In this you can use context variables with "$", the advantage of this
	attribute above the referid attribute is that you can combine variables and add some text of
	your own. The disadvantages relate to complexitiy and efficiency.
      </info>
    </attribute>
    <attribute>
      <name>session</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>You can also put things into the session with this.</info>
    </attribute>
    <attribute>
      <name>cookie</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>Writing things to cookie is also possible.</info>
    </attribute>
    <example>&lt;!-- write the variable `hoi' to the page --&gt;
&lt;mm:write referid="hoi" /&gt;</example>

    <example>&lt;!-- Create a jsp-variable `greet' from context variable `hoi', write
     `greet' uppercased to the page --&gt; 
&lt;mm:write referid="hoi" jspvar="greet"&gt;&lt;%= greet.toUpperCase() %&gt;&lt;/mm:write&gt;</example>

  </tag>
  <tag>
    <name>import</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.ImportTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.ImportTEI</teiclass>
    <info>
    To put objects in the context. That is, import a variable from an
    external source (a parent context, parameters, a form
    (postparameters) or the session). You can also create a new variable
    with this.
    </info>
    <see>context</see>
    <see>write</see>
    <see>contextreferrer</see>
    <attribute>
        <name>id</name>
        <required>false</required>
        <requirednote>Either `id' or `externid' or both must be supplied.</requirednote>
        <rtexprvalue>false</rtexprvalue>
    <info>
        This is the key by which the object will be registered in the
        context. This key may not already exist. You must use the
        remove tag first, if you need to change the value of the
        registered object. If you do not supply this attribute, it is
        supposed to have the same value as `externid' which should be
        present then.
    </info>
    </attribute>
    <attribute>
        <name>externid</name>
        <required>false</required>
        <requirednote>Either `id' or `externid' or both must be supplied.</requirednote>
        <rtexprvalue>true</rtexprvalue>
    <info>
        <p>
    The `externid' is the name of an attribute in the session,
    parameter in the request, or id in the parent context. The
    value of this thing is imported in the current context, with
    the id given by the attribute `id'.
        </p>
        <p>
    If there is no attribute `externid' then the value of the new
    object in the context is taken from the body of this import
    tag. In that way you can create a variable.
        </p>
    </info>
    </attribute>
    <attribute>
        <name>required</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
    <info>
    If this object is required to be present. If it has to be
    present, then the present tag will always evaluate. If nothing
    can be found by externid and a default value in the
    body is missing too, then an exception will follow if required
    is true.
    </info>
    </attribute>
    <attribute>
        <name>from</name>
        <required>false</required>
        <rtexprvalue>true</rtexprvalue>
    <info>
    Where to search the externid in. On default it is searched in
    several sources, but you can limit it with this attribute. In this way it
    is also possible to get different variables with the same name
    from different sources.
    </info>
    <possiblevalue>
          <value>parent</value>
        </possiblevalue>
    <possiblevalue>
          <value>page</value>
        </possiblevalue>
    <possiblevalue>
          <value>session</value>
        </possiblevalue>
    <possiblevalue>
          <value>cookie</value>
        </possiblevalue>
    <possiblevalue>
          <value>parameters</value>
        </possiblevalue>
    <possiblevalue>
          <value>postparameters</value>
        </possiblevalue>
    </attribute>
    <attribute>
        <name>jspvar</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
    <info>
    If you specify `jspvar' a jsp-variable with this name will be
    created too. It is available after the closing of the
    tag. Jsp-variables can also be created with the `write'
    tag. A write tag has preciser scoping possibilities.
    </info>
    </attribute>
    <attribute>
        <name>vartype</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
    <info>
    If you specify `jspvar' you can also specify a type for
    it. Default, this is a String, but you could e.g. also want an
    Integer.
    </info>
    </attribute>

<example>&lt;!-- Create a variable `hoi' from the parameter `haj', 
     Generate an exception if this parameter is not present --&gt;
&lt;mm:import id="hoi" externid="haj" from="parameters" required="true" /&gt;</example>

<example>&lt;!-- Create a variable `hoi' from the parameter `haj', 
     If this parameter is not present, hoi becomes `hello' --&gt;
&lt;mm:import id="hoi" externid="haj" from="parameters" &gt;hello&lt;/mm:import&gt;</example>

<example>&lt;!-- Create a variable `hoi' with value `hello' --&gt;
&lt;mm:import id="hoi"&gt;hello&lt;/mm:import&gt;</example>


<example>&lt;!-- Create a variable `hoi'. The value will come from an external source,
like the parameter list or the session (whereever it is availabe) --&gt;
&lt;mm:import externid="hoi" /&gt;</example>

  </tag>
  <tag>
    <name>remove</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.RemoveTag</tagclass>
    <info>
    Remove an object from the context.
    </info>
    <attribute>
        <name>referid</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
    <info>
    </info>
    </attribute>
  </tag>
  <tag>
    <name>url</name>
    <extends>writer</extends>
    <extends>contextwriter</extends>
    <extends>cloudreferrer</extends>  
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
    Returns an URL with parameters from the context.
    </info>
    <see>param</see>
    <see>image</see>
    <attribute>
        <name>referids</name>
        <required>false</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
    <info>
    Specify which parameters. A comma seperated list of context
    variable id's.
    </info>
    </attribute>
    <attribute>
        <name>page</name>
        <required>false</required>
        <rtexprvalue>true</rtexprvalue>
    <refercontext>true</refercontext>
    <info>
    The url to refer to. If not specified, then it becomes the
        result of getRequestURI. 
    </info>
    </attribute>
  </tag>
  <tag>
    <name>image</name>
    <extends>nodereferrer</extends>
    <extends>writer</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ImageTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.StringWriterTEI</teiclass>
    <info>
	  <p>
		Returns an URL to the image servlet. This is a NodeReferrer
		and consequently has to live as a child of a (image) node.
	  </p>
	  <p>
        Using this tag makes your pages more portable to other system,
        and hopefully less sensitive for future changes in how the
        image servlet works.
	  </p>
    </info>
    <attribute>
        <name>template</name>
        <required>false</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
    <info>
		<p>
		  A 'transformation' template.
		</p>
		<p>
		  In the font option, mm: stands for 'mmbase configuration
		  directory'. In this way it is easy to make sure that fonts
		  are available.
		</p>
    </info>
	  <examplevalue>
        <value>s(100x100)</value>
	  </examplevalue>
	  <examplevalue>
        <value>s(200x200!)+font(mm:fonts/Arial.ttf)+fill(ffffff)+pointsize(20)+gravity(NorthEast)+text(0,20,'MM Base')</value>
	  </examplevalue>
	  <examplevalue>
        <value>s(180)+modulate(120,0)+gamma(1/1/2)+bordercolor(8c9c23)+border(10x0)</value>
	  </examplevalue>
	  <examplevalue>
        <value>s(200)+fill(ffffff)+circle(20,20 30,30)</value>
	  </examplevalue>
	  <examplevalue>
        <value>s(200x200!)+part(100,100,150,150)</value>
	  </examplevalue>
	  <examplevalue>
        <value>s(200)+fill(ffffff)+draw(rectangle 100,100 150,150)+dia+flipx</value>
	  </examplevalue>
	  <examplevalue>
        <value>s(200)+colorizehex(f01010)</value>
	  </examplevalue>
	  <examplevalue>
        <value>s(200)+f(gif)+paint(10)</value>
	  </examplevalue>	  
    </attribute>

  </tag>
  <tag>
    <name>include</name>
    <extends>url</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.IncludeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
      <p>
		Does an include. This tag is rather similar to mm:url, but in
		stead of returing the url, it returns the page itself. In that
		respect it is also very similar to jsp:include. The advantage
		above jsp:include is that this tag is aware of the context
		parameters and knows the 'param' sub tag.
      </p>
      <p>
		You can also consider using the jsp &lt;%@include file=""
		%&gt;. This will include the code of that page in place and
		compile it together with your page. So in that aspect it is
		much different from this tag, which "includes" a stand-alone
		page.
      </p>
    </info>
    <attribute>
      <name>debug</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <info>
		For debugging you can print the used URL in the page as comments..
      </info>
      <possiblevalue>
	<value>none</value>
	<info>No debugging on the page (default)</info>
      </possiblevalue>
      <possiblevalue>
	<value>html</value>
	<info>Use html comments</info>
      </possiblevalue>
      <possiblevalue>
	<value>css</value>
	<info>Use css comments</info>
      </possiblevalue>
    </attribute>
    <see>param</see>
    <see>url</see>
  </tag>
  <tag>
    <name>param</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.ParamTag</tagclass>
    <info>
    Adds a parameter to the parent URL Tag.
    </info>
    <see>url</see>
    <see>include</see>
    <attribute>
        <name>name</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
    <info>
	The name of the parameter. 
    </info>
    </attribute>
    <attribute>
        <name>value</name>
        <required>false</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
    <info>
	The value of the parameter. Is this attribute is missing, then the body of the param tag is used.
    </info>
    </attribute>
  </tag>
  <tag>
    <name>compare</name>
    <extends>condition</extends>
    <extends>writerreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.CompareTag</tagclass>
    <info>
    Compares the value of a context variable to a String value. Only if
    they are equal the body is evaluated.
    </info>
    <see>isempty</see>
    <see>isnotempty</see>
    <attribute>
      <name>referid</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
		Which context variable.
      </info>
	</attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
      <requirednote>
		Either `value' or `referid2' must be present.
      </requirednote>
      <info>
		The value which the context variable must have, this is always a String.
      </info>
    </attribute>
    <attribute>
      <name>referid2</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <refercontext>true</refercontext>
	  <info>
		The value can also be another context variable, which is not necessarely a string.
	  </info>
    </attribute>
  </tag>
  <tag>
    <name>isnotempty</name>
    <extends>condition</extends>
    <extends>writerreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsNotEmptyTag</tagclass>
    <info>
      Checks if parent writer is not empty.
    </info>
  </tag>
  <tag>
    <name>isempty</name>
    <extends>condition</extends>
    <extends>writerreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsEmptyTag</tagclass>
    <info>
      Checks if parent writer is empty.
    </info>
  </tag>
  <tag>
    <name>isgreaterthan</name>
    <extends>compare</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsGreaterThanTag</tagclass>
    <info>
	  The body evaluated if the compared value is greater.
    </info>
  </tag>
  <tag>
    <name>islessthan</name>
    <extends>compare</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.macro.IsLessThanTag</tagclass>
    <info>
	  The body evaluated if the compared value is smaller.
    </info>
  </tag>
  <tag>
    <name>aliaslist</name>
    <extends>nodereferrer</extends>
    <extends>writer</extends>
    <extends>listprovider</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.AliasListTag</tagclass>
    <info>
      This is a list which can only live under a NodeProvider. In the body you can use the `writer'
      functionality to actually write out the alias.
    </info>
  </tag>
  <tag>
    <name>maywrite</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayWriteTag</tagclass>
    <info>
    Check if node may be changed.
    </info>
  </tag>
  <tag>
    <name>maydelete</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayDeleteTag</tagclass>
    <info>
    Check if node may be deleted.
    </info>
  </tag>
  <tag>
    <name>maycreate</name>
    <extends>cloudreferrer</extends>
    <extends>condition</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayCreateTag</tagclass>
    <info>
    Check if node may be created.
    </info>
    <attribute>
        <name>type</name>
        <required>true</required>
    </attribute>
  </tag>
  <tag>
    <name>maycreaterelation</name>
    <extends>cloudreferrer</extends>
    <extends>condition</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayCreateRelationTag</tagclass>
    <info>
    Check if a relation may be created.
    </info>
    <attribute>
        <name>role</name>
        <required>true</required>
    </attribute>
    <attribute>
        <name>source</name>
        <required>true</required>
    </attribute>
    <attribute>
        <name>destination</name>
        <required>true</required>
    </attribute>
    <see>createrelation</see>
  </tag>
  <tag>
    <name>maylink</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayLinkTag</tagclass>
    <info>
    This tag will be removed!
    </info>
  </tag>
  <tag>
    <name>maychangecontext</name>
    <extends>nodereferrer</extends>
    <extends>condition</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.MayChangeContextTag</tagclass>
    <info>
    Check if the context of a node may be changed.
    </info>
  </tag>
  <tag>
    <name>setcontext</name>
    <extends>nodereferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.security.SetContextTag</tagclass>
    <info>
      Change the context of a node.
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        In stead of giving the name of the context in the body, you can also
        indicate it with this parameter.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>countrelations</name>
    <extends>writer</extends>
    <extends>nodereferrer</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.CountRelationsTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.IntegerWriterTEI</teiclass>
    <info>
      Can be used inside a node tag to show the number of relations the node
      has.
    </info>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        If specified only the number of relations to the type of nodes
        specified by this attribute are returned.
      </info>
    </attribute>
  </tag>
  <tag>
    <name>listrelations</name>
    <extends>nodeprovider</extends>
    <extends>nodereferrer</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.ListRelationsTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
       List the relations belonging to this nodes. Relations are nodes too.
    </info>
    <see>relatednode</see>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>Only list the relations where the other node is of this type.</info>
    </attribute>
    <attribute>
      <name>role</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>Only list the relations which are of this role.</info>
    </attribute>
  </tag>
  <tag>
    <name>relatednode</name>
    <extends>nodeprovider</extends>
    <extends>contextwriter</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.RelatedNodeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.NodeProviderTEI</teiclass>
    <info>
	  For use under listrelations tag. With this you can easily find
	  the other node (it uses the 'snumber' and 'dnumber' fields for you.
    </info>
    <see>listrelations</see>
    <attribute>
	  <name>listrelations</name>
	  <required>false</required>
	  <rtexprvalue>true</rtexprvalue>
	  <refercontext>true</refercontext>
	  <info>
		To refer to another listrelations tag then the direct parent.
    </info>
    </attribute>
  </tag>
  <tag> 
    <name>size</name>
    <extends>contextwriter</extends>
    <extends>writer</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.SizeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.IntegerWriterTEI</teiclass>
    <info>
      The size of the current list.
    </info>
  </tag>
  <tag>   
    <name>index</name>
    <extends>contextwriter</extends>
    <extends>writer</extends>
    <extends>listreferrer</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.IndexTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.IntegerWriterTEI</teiclass>
    <info>
      The index of the current item of the current list.
    </info>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
         Where do you want to start counting. Default this is 1.
        </info>
    </attribute>
   </tag>
  <tag>   
    <name>timer</name>	 
    <tagclass>org.mmbase.bridge.jsp.taglib.debug.TimerTag</tagclass>
    <info>
	  <p>
		Debug tag for measuring performance. It measures the duration of
		its body. Child tags can possibly communicate with this tag to
		measure theirselves which will be logged on 'debug' level.
		Total times per tag type are logged on 'service' level at the
		end of the Timer tag (sorted per unique combinations of id and tag type).
	  </p>
	  <p>
		This tag should only be used when tuning your page for speed,
		and removed when you're finished.
	  </p>
    </info>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
		Give a name to the timer to easily find it in the log.
	  </info>
    </attribute>
	<extends>contextreferrer</extends>   
   </tag>
  <tag>
    <name>treefile</name>
    <extends>url</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.TreeFileTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
          This tag does the same as TreeIncludeTag, but instead of including the
          page that was found, it returns the URL for that page.
    </info>
    <attribute>
        <name>objectlist</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
        <info>
                 The list of objects
        </info>
    </attribute>
    <see>param</see>
    <see>url</see>
  </tag>
  <tag>
    <name>leaffile</name>
    <extends>url</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.LeafFileTag</tagclass>
	<teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>                                                                
          This tag does the same as LeafIncludeTag, but instead of including the
          page that was found, it returns the URL for that page. This URL can be
          displayed using the 'write' tag.
    </info>                                                     
    <attribute>
        <name>objectlist</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
        <info>
                 The list of objects
        </info>
    </attribute>
    <see>param</see>
    <see>url</see>  
  </tag>

  <tag>
    <name>treeinclude</name>                                                             
    <extends>include</extends>
    <extends>treefile</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.TreeIncludeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
          <p>
		This tag is an implementation of the 'TREEPART' scan command.
		There are two parameters: 'objectlist' and 'page'. The 
		objectlist is a ',' seperated list of objects, the 'page'
		is the page to be included. (inherited from the extended 'URL' tag)
          </p>
          <p>
		This tag is similar in behaviour as the 'include' tag, but it
		will try several different paths to find a 'best matching'
		file to include. An example:
          </p>
	  <p>
		objectlist="1,2,3,4", page="doh.jsp"
 		The treeinclude tag will first try to include '/1/2/3/4/doh.jsp', if
                that file is not available, it will try '/1/2/3/doh.jsp', etc. etc.
		Besides the directory '/1/2/3/4', all directories starting with
		the objectnumber will match. This means that the following paths
		will all work with the given parameters:
		<ul>
			<li>/1blaat/2random/3tekst/4kiekeboe/doh.jsp</li>
			<li>/1/2/3/4ditiseentest/doh.jsp</li>
			<li>/1/2/3/4alfabeta/doh.jsp</li>
		</ul>
		In case there are multiple paths that match for a given level
		(compare the last two entries of the list above), the one that
		comes alphabetically first will be chosen.
		This behaviour is specified in the 'getSmartPath()' method in
		MMObjectBuilder.
          </p>
	  <p>
		The naming schema mentioned above (number postfixed with a random
		string) can be overridden by a builder. For instance, if object
		with number 1 is actually a 'portal' object, and the 'portal' builder
		defines the 'getSmartPath' method, the following files (in order of importance,
		as soon as one of the files exists this one will be taken) will be
		included:
		<ul>
		  <li>/myportal/2random/3tekst/4kiekeboe/doh.jsp</li>
		  <li>/myportal/2/3/4ditiseentest/doh.jsp</li>
		  <li>/myportal/2/3/4alfabeta/doh.jsp</li>
		</ul> 
	  </p>
    </info>
    <see>include</see>
    <see>treefile</see>
    <see>param</see> 
    <see>url</see>
  </tag>
  <tag>
    <name>leafinclude</name>
    <extends>include</extends>
    <extends>leaffile</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.LeafIncludeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.pageflow.UrlTEI</teiclass>
    <info>
      This tag does almost exactly the same as TreeInclude. 
      The only difference is when Treeinclude cannot find a file to include. In that case,
      Leafinclude will use the type of the nodes from the objectlist to find a file to include.
      An example:
      <ul>
        <li>Object with id '100' is an object from builder 'portals'</li>
        <li>Object with id '101' is an object from builder 'subsites'</li>
      </ul>
      When leafinclude is called with page='page.jsp' and objectlist='101,102', the following
      files will be tried to be included, in order of priority:
      <ul>
        <li> 100/101/page.jsp </li>
        <li> 100/subsites/page.jsp </li>
        <li> portals/subsites/page.jsp </li>
      </ul>
      Ofcourse, the default behaviour of getSmartPath (the fact that the directory '100' is chosen 
      for objectid '100') can still be overridden.
    </info>
    <see>include</see>
    <see>leaffile</see>
    <see>param</see>
    <see>url</see>
  </tag>
  <tag>
    <name>param</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.pageflow.ParamTag</tagclass>
    <info>
    Adds a parameter to the parent URL Tag.
    </info>
    <see>url</see>
    <see>include</see>
    <attribute>
        <name>name</name>
        <required>true</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
    <info>
	The name of the parameter. 
    </info>
    </attribute>
    <attribute>
        <name>value</name>
        <required>false</required>
        <rtexprvalue>true</rtexprvalue>
        <refercontext>true</refercontext>
    <info>
	The value of the parameter. Is this attribute is missing, then the body of the param tag is used.
    </info>
    </attribute>
  </tag>
  <tag>   
    <name>formatter</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.FormatterTag</tagclass>
    <info>
      This tag performs XSL and other transformations.
    </info>
    <attribute>
      <name>xslt</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        Path to the XSLT file which must, relative to the current jsp
        file. If you want to use default MMBase XSLT's, then you can
        prefix by 'mm:', and searching will begin in the mmbase
        configuration directory.
      </info>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        <p>
          A few transformations are predefined in MMBase. If they are
          XSL transformations then you can put your extensions in e.g.
          xslt/2xhtml.xslt. This xslt can be extended from the 'basic'
          xslt by beginning it with: &lt;xsl:import
          href=&quot;mm:2xhtml.xslt&quot; /&gt;.
        </p>
        <p>
          So basicly, when you do specify the format attribute there
          can happen two different things:
          <ul>
            <li>
              It is a shortcut for certain values for the 'xslt'
              attribute.  E.g. format="xhtml" is shorthand for
              xslt="xstl/2xhtml.xslt'.
            </li>
            <li>
              It give access to certain java functionality present in
              the formatter tag's implementation. It is e.g. senseless
              to escape XML with a XSL stylesheet, when it can be done
              so easily in Java.
            </li>
          </ul>
        </p>
      </info>
      <possiblevalue>
        <value>xhtml</value>
        <info>An XSLT. Transforms nodes or fields to an XHTML presentation.</info>
      </possiblevalue>
      <possiblevalue>
        <value>rich</value>
        <info>An XSLT. Transforms mmxf fields to simple text only presentation.</info>
      </possiblevalue>
      <possiblevalue>
        <value>presentxml</value>
        <info>An XSLT. Tries to make a nice presentation of XMl in XHTML, with colors and so on.</info>
      </possiblevalue>
      <possiblevalue>
        <value>code</value>
        <info>An XSLT. Doesn't work well. To present taglib code.</info>
      </possiblevalue>
      <possiblevalue>
        <value>escapexml</value>
        <info>Escapes characters which make something XML. This way you can easily present XML in XHTML pages</info>
      </possiblevalue>
      <possiblevalue>
        <value>escapexmlpretty</value>
        <info>Similar to escapexml, but the XML is nicely formatted for human consumption first. This required the XML to be valid, otherwise you get an exception.</info>
      </possiblevalue>
      <!-- THERE IS A TIME TAG TO DO THESE KIND OF THINGS
      <possiblevalue>
      <value>date</value>
      <info>
		  Take a datetime field and formats it like a real date and/or
		  time. Use the options attribute to specify how this must be
		  done exactly. It is an argument for
		  java.text.SimpleDateFormat.applyPattern.
    </info>
	  </possiblevalue>
      -->
    </attribute>
    <attribute>
      <name>options</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        You can give options to the transformation.
      </info>
    </attribute>
    <extends>contextreferrer</extends>   
    <extends>writer</extends>   
    <see>xslt</see>
  </tag>
  <tag>   
    <name>xslt</name>
    <tagclass>org.mmbase.bridge.jsp.taglib.XsltTag</tagclass>
    <info>
      This tag must live as a subtag of Formatter. You can add 'inline' XSL with this. (EXPERIMENTAL)
    </info>	
	<extends>contextreader</extends>
    <see>formatter</see>
   </tag>
  <tag>
    <name>time</name>
    <extends>writer</extends>
    <extends>contextwriter</extends>
    <extends>contextreader</extends>
    <tagclass>org.mmbase.bridge.jsp.taglib.TimeTag</tagclass>
    <teiclass>org.mmbase.bridge.jsp.taglib.StringWriterTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>
	    The time taglib can be used for all kind of manipulations regarding to times.</info>
    <attribute>
      <name>time</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        The time attribute specifies the time to be used, this can be
        done in multiple ways. 1) When the time attribute is not
        specified the current time will be taken. 2) Specify the time
        in seconds from EPOC (this is the way how MMBase handles
        times). 3) By using keywords, such as: yesterday, tomorrow,
        today, now. 4) By specifying the time in a human readable way,
        such as: Friday 10 January 2002. In the last case the
        attribute inputformat should be used to tell the time taglib
        how to read the human readable time.
      </info>
    </attribute>
    <attribute>
      <name>inputformat</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>       
      <info>
        The inputformat attribute should only be used when the time
        attribute contains a human readable time. The comprehensive
        syntax for this attribute can be found at
        http://java.sun.com/j2se/1.3/docs/api/java/text/SimpleDateFormat.html. Notice
        that if times have the following form they will be parsed
        automatically, and this attribute can be ommited: yyyy/mm/dd
        hh:mm:ss, yyyy/mm/dd, and hh:mm:ss.
      </info>
    </attribute>
    <attribute>
      <name>offset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <info>
        The offset attribute can be used to change the time specified
        with the time attribute. The offset is expressed in seconds.
      </info>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        The format attribute specifes how to display the time. If the
        format attribute is not used the time will be displayed in
        seconds from EPOC. The syntax of the format attribute is
        identical to the syntax of the inputformat attribute. Instead
        of using the format attribute you can also use the MMBase
        formatter taglib.
      </info>
    </attribute>
    <!--  This should still be discussed.
    <attribute>
      <name>language</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <info>
        The language attribute enables you to display the days and
        months in another language. If this attribute is not used the
        default system language will be used.
      </info>
    </attribute>
    -->
  </tag>
</taglib>
